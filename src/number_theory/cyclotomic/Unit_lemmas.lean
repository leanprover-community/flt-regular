import number_theory.cyclotomic.galois_action_on_cyclo
import number_theory.cyclotomic.cyclotomic_units

variables (p : ‚Ñï+) (K : Type*) [field K]


open_locale big_operators non_zero_divisors number_field pnat
open is_cyclotomic_extension
open cyclotomic_ring
open number_field polynomial

local notation `KK` := cyclotomic_field p ‚Ñö
local notation `RR` := ùìû (cyclotomic_field p ‚Ñö)
local notation `Œ∂` := zeta p ‚Ñö KK

local attribute [instance] is_cyclotomic_extension.number_field

noncomputable theory

-- we're nearly here!

instance ‚Ñö_cycl_ext : is_cyclotomic_extension {p} ‚Ñö (cyclotomic_field p ‚Ñö) := sorry

instance : has_pow KK ‚Ñï:=infer_instance

/-- zeta now as a unit in the ring of integers. This way there are no coe issues-/
def zeta_unit' : RRÀ£ :={
val:= (‚ü®zeta p ‚Ñö KK, zeta_integral p ‚Ñö‚ü© : RR),
inv:= (‚ü®(zeta p ‚Ñö KK)^((p-1): ‚Ñï), zeta_integral' p ‚Ñö (p-1)‚ü© : RR),
val_inv := by { have:= zeta_pow p ‚Ñö KK ,
  have h1:= zeta_primitive_root p ‚Ñö KK, have h2:= h1.is_unit p.2, have h3:=h2.ne_zero,
 tidy, rw  pow_sub‚ÇÄ, rw this, simp, apply mul_inv_cancel, apply h3, apply h3, linarith,},
inv_val:= by{have:= zeta_pow p ‚Ñö KK ,
  have h1:= zeta_primitive_root p ‚Ñö KK, have h2:= h1.is_unit p.2, have h3:=h2.ne_zero,
 tidy, rw  pow_sub‚ÇÄ, rw this, simp, apply inv_mul_cancel, apply h3, apply h3, linarith,} ,}

local notation `Œ∂'`:= zeta_unit' p

lemma zeta_unit_coe: (Œ∂' : KK) = Œ∂ :=by refl

lemma zeta_unit_pow : (Œ∂')^(p : ‚Ñ§) = 1 :=
begin
simp_rw zeta_unit',
ext1,
ext1,
simp,
apply zeta_pow,
end

/-- `is_gal_conj_real x` means that `x` is real. -/
def is_gal_conj_real (x : KK) : Prop := gal_conj p x = x

--bunch of lemmas that should be stated more generally if we decide to go this way
lemma unit_coe (u : RRÀ£) : (u : RR) * ((u‚Åª¬π : RRÀ£) : RR) = 1 :=
begin
  norm_cast,
  simp only [mul_right_inv, units.coe_one],
end

lemma unit_coe_non_zero (u  : RRÀ£) : (u : KK) ‚â† 0 :=
begin
  by_contra h,
  have : (u : KK) * ((u‚Åª¬π : RRÀ£ ) : KK) = 1, by {simp,norm_cast, apply unit_coe,},
  rw h at this,
  simp at this,
  exact this,
end

lemma coe_life (u : RRÀ£) : ((u : RR) : KK)‚Åª¬π = ((u‚Åª¬π : RRÀ£) : RR) :=
begin
  rw ‚Üê coe_coe,
  rw ‚Üê coe_coe,
  rw inv_eq_one_div,
  have hu:= unit_coe_non_zero p u,
  rw div_eq_iff hu,
  rw mul_comm,
  simp only [coe_coe],
  norm_cast,
  simp only [mul_right_inv, units.coe_one],
end

lemma auxil (a b c d : RRÀ£) (h : a * b‚Åª¬π = c * d ) : a * d‚Åª¬π = b * c :=
begin
  rw mul_inv_eq_iff_eq_mul at *,
  rw h,
  apply symm,
  rw mul_assoc,
  rw mul_comm,
end

--do more generally
lemma roots_of_unity_in_cyclo (x  : KK) (h : ‚àÉ (n : ‚Ñï) (h : 0 < n), x^(n: ‚Ñï) =1 ) :
  ‚àÉ (m k: ‚Ñï+), x = (-1)^(k : ‚Ñï) * (Œ∂')^(m : ‚Ñï) :=
begin
  obtain ‚ü®n, hn0, hn‚ü© := h,
  have hx : x ‚àà RR, by {sorry,},
  have hy: ‚àÉ (y : RRÀ£), x = y, by {sorry},
  have hxu : (‚ü®x, hx‚ü© : RR)^n = 1, by {ext, simp, apply hn,} ,
  obtain ‚ü®y, hyy‚ü©:= hy,
  rw hyy,
  have H: ‚àÉ (m k: ‚Ñï+), y = (-1)^(k : ‚Ñï) * (Œ∂')^(m : ‚Ñï), by {
  rw (_root_.is_root_of_unity_iff hn0) at hxu,
  obtain ‚ü®l, hl, hhl‚ü©:=hxu,
  simp at hhl,
  simp at hl,
  by_cases hlp: l ‚à£ p,
  cases hlp,
    sorry,
    sorry,},

  sorry,
end

lemma zeta_runity_pow_even (h : 2 < p) (n : ‚Ñï) : ‚àÉ (m : ‚Ñï),
  (Œ∂')^n = (Œ∂')^(2*m) :=
begin
  by_cases  n = 0,
  use 0,
  rw h,
  simp,
  have r:= ((2 : zmod p)‚Åª¬π).val,
  have hr: ‚àÉ (k : ‚Ñï), 2*r =1+p*k ,by { sorry,},
  use r*n,
  obtain ‚ü®k,hk‚ü©:= hr,
  rw ‚Üê mul_assoc,
  simp_rw hk,
  ring_exp,
  rw pow_add,
  have h1 : (zeta_unit' p)^ ((p : ‚Ñ§) * k * n) = 1,
  by {have:= zeta_unit_pow p, rw mul_assoc, simp_rw zpow_mul, simp_rw this, simp,},
  norm_cast at h1,
  rw ‚Üê mul_assoc,
  simp_rw h1,
  simp,
end


lemma unit_inv_conj_not_neg_zeta_runity (h : 2 < p)  (u : RRÀ£) (n  : ‚Ñï) :
  u * (unit_gal_conj p u)‚Åª¬π ‚â†  -(Œ∂') ^ n :=
begin
  by_contra H,
  sorry,
end

-- this proof has mild coe annoyances rn
lemma unit_inv_conj_is_root_of_unity (h : 2 < p)  (u : RRÀ£) :
  ‚àÉ m : ‚Ñï, u * (unit_gal_conj p u)‚Åª¬π = (Œ∂' ^ (m))^2 :=
begin
  have := mem_roots_of_unity_of_abs_eq_one (u * (unit_gal_conj p u)‚Åª¬π : KK) _ _,
  have H:= roots_of_unity_in_cyclo p ((u * (unit_gal_conj p u)‚Åª¬π : KK)) this,
  obtain ‚ü®n, k, hz‚ü© := H,
  simp_rw ‚Üê pow_mul,
  have hk := nat.even_or_odd k,
  cases hk,
  simp [nat.neg_one_pow_of_even hk] at hz,
  simp_rw  coe_life at hz,
  norm_cast at hz,
  rw hz,
  have := zeta_runity_pow_even p h n,
  obtain ‚ü®m , Hm‚ü© := this,
  use m,
  rw mul_comm,
  exact Hm,
  by_contra hc,
    simp [nat.neg_one_pow_of_odd hk] at hz,
    simp_rw  coe_life at hz,
    norm_cast at hz,
    have := unit_inv_conj_not_neg_zeta_runity p h u n,
    rw hz at this,
    simp at this,
    exact this,
  { exact unit_lemma_val_one p u,},
  { apply is_integral_mul,
    exact number_field.ring_of_integers.is_integral_coe (coe_b u),
    rw (_ : ((unit_gal_conj p u)‚Åª¬π : KK) = (‚Üë(unit_gal_conj p u‚Åª¬π))),
    exact number_field.ring_of_integers.is_integral_coe (coe_b _),
    simp,
    rw coe_life,
    norm_cast,
    apply uni_gal_conj_inv, },
end


lemma unit_lemma_gal_conj (h : 2 < p)  (u : RRÀ£) :
  ‚àÉ (x : RRÀ£) (n : ‚Ñ§), (is_gal_conj_real p (x : KK)) ‚àß (u : KK) = x * (Œ∂' ^ n) :=

begin
  have := unit_inv_conj_is_root_of_unity p h u,
  obtain ‚ü®m, hm‚ü© := this,
  let xuu:=u * ((Œ∂')‚Åª¬π ^ (m)),
  use [xuu, m],
   rw is_gal_conj_real,
  have hy : u * (Œ∂'  ^ ( m))‚Åª¬π = (unit_gal_conj p u) *  Œ∂'  ^ ( m),
  by {rw pow_two at hm,
  have := auxil p u (unit_gal_conj p u)  (Œ∂'  ^ (m)) (Œ∂'  ^ (m)),
  apply this hm},
  dsimp,
  simp only [inv_pow, alg_hom.map_mul],
  have hz: gal_conj p (Œ∂'^ ( m))‚Åª¬π =(Œ∂'  ^ ( m)) ,
  by {simp_rw zeta_unit', simp},
  rw ‚Üê coe_coe,
  rw ‚Üê coe_coe,
  split,
  rw (_ : (‚Üë(Œ∂' ^ m)‚Åª¬π : KK) = (Œ∂' ^ m : KK)‚Åª¬π),
  rw hz,
  have hzz := unit_gal_conj_spec p u,
  rw hzz,
  simp only [coe_coe],
  norm_cast,
  rw ‚Üê hy,
  simp only [subalgebra.coe_pow, subalgebra.coe_eq_zero, mul_eq_mul_left_iff,
  units.ne_zero, or_false, subalgebra.coe_mul, units.coe_pow, units.coe_mul],
  rw ‚Üê coe_life,
  simp only [subalgebra.coe_pow, units.coe_pow],
  simp_rw ‚Üê inv_pow,
  simp only [inv_pow, coe_coe],
  rw ‚Üê coe_life,
  simp only [subalgebra.coe_pow, units.coe_pow],
  simp,
  norm_cast,
  simp,
end

/-
lemma unit_lemma (u : RRÀ£) :
  ‚àÉ (x : RRÀ£) (n : ‚Ñ§), element_is_real (x : KK) ‚àß (u : KK) = x * (zeta_runity p ‚Ñö) ^ n :=
begin
  have := mem_roots_of_unity_of_abs_eq_one (u * (unit_gal_conj p u)‚Åª¬π : KK) _ _,
  { have : ‚àÉ m : ‚Ñï, u * (unit_gal_conj p u)‚Åª¬π = (zeta_runity p ‚Ñö) ^ (2 * m),
    sorry, --follows from above with some work
          -- what we have shows its +- a power of zeta_runity
    obtain ‚ü®m, hm‚ü© := this,
    use [u * (zeta_runity p ‚Ñö)‚Åª¬π ^ m, m],
    split,
    { rw element_is_real,
      intro œÜ,
      have := congr_arg (conj ‚àò œÜ ‚àò coe) hm,
      simp at this,
      simp [alg_hom.map_inv],
      rw ‚Üê coe_coe,
      rw ‚Üê coe_coe, -- TODO this is annoying
      rw (_ : (‚Üë(zeta_runity p ‚Ñö ^ m)‚Åª¬π : KK) = (zeta_runity p ‚Ñö ^ m : KK)‚Åª¬π),
      rw alg_hom.map_inv,
      rw ring_hom.map_inv,
      rw mul_inv_eq_iff_eq_mul‚ÇÄ,
      simp,
      sorry, -- wow we should really have some more structure and simp lemmas to tame this beast
      sorry, -- similar silly goal to below
      sorry,
       },
    { simp only [mul_assoc, inv_pow, subalgebra.coe_mul, coe_coe, units.coe_mul, zpow_coe_nat],
      norm_cast,
      simp, }, },
  { exact unit_lemma_val_one p u, },
  { apply is_integral_mul,
    exact number_field.ring_of_integers.is_integral_coe (coe_b u),
    rw (_ : ((unit_gal_conj p u)‚Åª¬π : KK) = (‚Üë(unit_gal_conj p u‚Åª¬π))),
    exact number_field.ring_of_integers.is_integral_coe (coe_b _),
    simp,
    sorry, -- tis a silly goal
     },
end
-/
