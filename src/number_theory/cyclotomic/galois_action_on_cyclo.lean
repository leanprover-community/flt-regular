import number_theory.cyclotomic.cyclotomic_units

import number_theory.cyclotomic.gal

universes u

open finite_dimensional

open_locale number_field

theorem power_basis.rat_hom_ext {S S' : Type*} [comm_ring S] [hS : algebra ‚Ñö S] [ring S']
  [hS' : algebra ‚Ñö S'] (pb : power_basis ‚Ñö S) ‚¶Éf g : S ‚Üí+* S'‚¶Ñ (h : f pb.gen = g pb.gen) :
f = g :=
let f' := f.to_rat_alg_hom, g' := g.to_rat_alg_hom in
fun_like.ext f g $
by convert fun_like.ext_iff.mp (pb.alg_hom_ext (show f' pb.gen = g' pb.gen, from h))

variables (K : Type*) (p : ‚Ñï+) [field K] [char_zero K] [is_cyclotomic_extension {p} ‚Ñö K]
variables {Œ∂ : K} (hŒ∂ : is_primitive_root Œ∂ p)

local notation `RR` := ùìû K

-- @Chris: you mentioned "checking automorphisms agree only on a generator" -
-- what you want is `power_basis.alg_hom_ext`

open_locale number_field cyclotomic

open is_cyclotomic_extension polynomial

noncomputable theory

/-- complex conjugation as a Galois automorphism -/
def gal_conj : K ‚âÉ‚Çê[‚Ñö] K :=
((aut_equiv_pow K (cyclotomic.irreducible_rat p.pos)).symm (-1))

variables {K p}

lemma zmod.val_neg_one' : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí (-1 : zmod n).val = n - 1
| (n + 1) _ := zmod.val_neg_one _

lemma gal_conj_zeta : gal_conj K p (zeta p ‚Ñö K) = (zeta p ‚Ñö K)‚Åª¬π :=
begin
  let hŒ∂ := zeta_spec p ‚Ñö K,
  simp only [gal_conj, units.coe_neg_one, aut_equiv_pow_symm_apply, alg_equiv.coe_alg_hom,
             power_basis.equiv_of_minpoly_apply],
  convert (hŒ∂.power_basis ‚Ñö).lift_gen _ _,
  rw [is_primitive_root.power_basis_gen, zmod.val_neg_one' p.pos,
      pow_sub‚ÇÄ _ (hŒ∂.ne_zero p.ne_zero) p.pos, pow_one, hŒ∂.pow_eq_one, one_mul]
end

include hŒ∂

@[simp] lemma gal_conj_zeta_runity : gal_conj K p Œ∂ = Œ∂‚Åª¬π :=
begin
  obtain ‚ü®t, ht, rfl‚ü© := (zeta_spec p ‚Ñö K).eq_pow_of_pow_eq_one hŒ∂.pow_eq_one p.pos,
  rw [map_pow, gal_conj_zeta, inv_pow]
end

lemma gal_conj_zeta_runity_pow (n : ‚Ñï) :  gal_conj K p (Œ∂^n) = (Œ∂‚Åª¬π)^n :=
by rw [map_pow, gal_conj_zeta_runity hŒ∂]

omit hŒ∂

open_locale complex_conjugate

lemma conj_norm_one (x : ‚ÑÇ) (h : complex.abs x = 1) : conj x = x‚Åª¬π :=
by rw [‚Üêcomplex.abs_mul_exp_arg_mul_I x, h, complex.of_real_one, one_mul, ‚Üêcomplex.exp_conj,
       ‚Üêcomplex.exp_neg, map_mul, complex.conj_I, mul_neg, complex.conj_of_real]

include hŒ∂

@[simp]
lemma embedding_conj (x : K) (œÜ : K ‚Üí+* ‚ÑÇ) : conj (œÜ x) = œÜ (gal_conj K p x) :=
begin
  -- dependent type theory is my favourite
  change (ring_hom.comp conj œÜ x) = (œÜ.comp $ ‚Üë(gal_conj K p)) x,
  revert x,
  suffices : œÜ (gal_conj K p Œ∂) = conj (œÜ Œ∂),
  { rw ‚Üêfunction.funext_iff,
    dsimp only,
    congr' 1,
    apply (hŒ∂.power_basis ‚Ñö).rat_hom_ext,
    { exact this.symm },
    { exact algebra_rat } },
  rw [conj_norm_one, gal_conj_zeta_runity hŒ∂, map_inv‚ÇÄ],
  refine complex.norm_eq_one_of_pow_eq_one _ p.ne_zero,
  rw [‚Üêmap_pow, hŒ∂.pow_eq_one, map_one]
end

omit hŒ∂

-- this proof makes me happy inside
lemma gal_conj_idempotent : (gal_conj K p).trans (gal_conj K p) = alg_equiv.refl :=
begin
  rw [‚Üêalg_equiv.aut_mul, gal_conj, ‚Üêmap_mul, neg_one_mul, neg_neg, map_one],
  refl,
end

variable (p)

--generalize this
lemma gal_map_mem {x : K} (hx : x ‚àà RR) (œÉ : K ‚Üí‚Çê[‚Ñö] K) : œÉ x ‚àà RR :=
map_is_integral (œÉ.restrict_scalars ‚Ñ§) hx

lemma gal_map_mem_subtype (œÉ : K ‚Üí‚Çê[‚Ñö] K) (x : RR) : œÉ x ‚àà RR :=
by simp [gal_map_mem]

/-- Restriction of `œÉ : K ‚Üí‚Çê[‚Ñö] K` to the ring of integers.  -/
def int_gal (œÉ : K ‚Üí‚Çê[‚Ñö] K) : RR ‚Üí‚Çê[‚Ñ§] RR :=
((œÉ.restrict_scalars ‚Ñ§).restrict_domain RR).cod_restrict RR (gal_map_mem_subtype œÉ)

@[simp] lemma int_gal_apply_coe (œÉ : K ‚Üí‚Çê[‚Ñö] K) (x : RR) :
  (int_gal œÉ x : K) = œÉ x := rfl

/-- Restriction of `œÉ : K ‚Üí‚Çê[‚Ñö] K` to the units of the ring of integers.  -/
def units_gal (œÉ : K ‚Üí‚Çê[‚Ñö] K) : RRÀ£ ‚Üí* RRÀ£ :=
units.map $ int_gal œÉ

@[simp] lemma units_gal_apply_coe (œÉ : K ‚Üí‚Çê[‚Ñö] K) (x : RRÀ£) :
(units_gal œÉ x : K) = œÉ x := rfl

/-- `unit_gal_conj` as a bundled hom. -/
def unit_gal_conj : RRÀ£ ‚Üí* RRÀ£ :=
units_gal (gal_conj K p)

lemma unit_gal_conj_spec (u : RRÀ£) : gal_conj K p (u : ùìû K) = ‚Üë(unit_gal_conj K p u : ùìû K) := rfl

lemma uni_gal_conj_inv (u : RRÀ£) : (unit_gal_conj K p u)‚Åª¬π = (unit_gal_conj K p u‚Åª¬π) := rfl

lemma unit_lemma_val_one (u : RRÀ£) (œÜ : K ‚Üí+* ‚ÑÇ) :
  complex.abs (œÜ (u * (unit_gal_conj K p u)‚Åª¬π)) = 1 :=
begin
  rw [map_mul, complex.abs.is_absolute_value.abv_mul, map_inv‚ÇÄ,
      coe_coe (unit_gal_conj K p u), ‚Üêunit_gal_conj_spec, ‚Üêembedding_conj $ zeta_spec p ‚Ñö K],
  simp only [coe_coe, map_inv‚ÇÄ, complex.abs_conj],
  rw [mul_inv_eq_one‚ÇÄ],
  intro h,
  simp only [_root_.map_eq_zero] at h,
  rw [‚Üê subalgebra.coe_zero (ùìû K), subtype.coe_inj] at h,
  refine units.ne_zero _ h
end

lemma unit_gal_conj_idempotent (u : RRÀ£) : (unit_gal_conj K p (unit_gal_conj K p u)) = u :=
units.ext $ subtype.ext $ by rw [‚Üêunit_gal_conj_spec, ‚Üêunit_gal_conj_spec, ‚Üêalg_equiv.trans_apply,
                                 gal_conj_idempotent, alg_equiv.coe_refl, id]
