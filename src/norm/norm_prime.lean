import linear_algebra.smodeq
import number_theory.number_field.norm

open_locale number_field

open ring_of_integers ideal finset nat finite_dimensional

variables {K : Type*} [field K] (pb : power_basis ‚Ñ§ (ùìû K))

local notation `R` := ùìû K

lemma exists_int_smodeq (x : R) : ‚àÉ (n : ‚Ñ§), smodeq (span ({pb.gen} : set R)) x n  :=
begin
  refine ‚ü®((pb.basis.repr) x) ‚ü®0, pb.dim_pos‚ü©, _‚ü©,
  have H := basis.sum_repr pb.basis x,
  rw [power_basis.coe_basis, ‚Üê insert_erase
    (mem_univ ‚ü®0, pb.dim_pos‚ü© : (‚ü®0, pb.dim_pos‚ü© : fin pb.dim) ‚àà univ), sum_insert] at H,
  { have : ‚àÄ i : (univ : finset (fin pb.dim)).erase ‚ü®0, pb.dim_pos‚ü©,
      ‚Üë(((pb.basis.repr) x) i) * pb.gen ^ ((i : fin pb.dim) : ‚Ñï) =
      ‚Üë(((pb.basis.repr) x) i) * pb.gen ^ (i : ‚Ñï).pred.succ,
    { rintro ‚ü®i, hi‚ü©,
      congr' 1,
      rw [succ_pred_eq_of_pos],
      rw [coe_coe, subtype.coe_mk],
      refine nat.pos_of_ne_zero (Œª h, _),
      cases i with i‚ÇÅ hi‚ÇÅ,
      simp only [coe_coe, subtype.coe_mk] at h,
      simpa [h] using hi },
    simp only [fin.coe_mk, pow_zero, int.smul_one_eq_coe, zsmul_eq_mul] at H,
    rw [‚Üê finset.sum_finset_coe] at H,
    conv_lhs at H { congr, skip, congr, skip, funext,
      rw [this i, pow_succ, ‚Üê mul_assoc, mul_comm _ pb.gen, mul_assoc] },
    rw [‚Üê mul_sum] at H,
    nth_rewrite 0 [‚Üê H],
    rw [mul_one, smodeq.def, quotient.mk_eq_mk, map_add, _root_.map_mul,
      ‚Üê submodule_span_eq, quotient.eq_zero_iff_mem.2 (submodule.mem_span_singleton_self pb.gen),
      zero_mul, add_zero, quotient.mk_eq_mk] },
  { exact not_mem_erase ‚ü®0, pb.dim_pos‚ü© univ }
end

variables [number_field K] {pb}
variables (hpr : prime (norm ‚Ñö pb.gen))

include hpr

lemma gen_ne_zero : pb.gen ‚â† 0 :=
begin
  intro h,
  simp only [norm, monoid_hom.restrict_apply, monoid_hom.cod_restrict_apply,
    algebra.norm_eq_zero_iff.2 (show (pb.gen : K) = 0, by exact_mod_cast h)] at hpr,
  simpa using prime.ne_zero hpr
end

lemma quotient_not_trivial : nontrivial (R ‚ß∏ (span ({pb.gen} : set R))) :=
quotient.nontrivial (Œª h, hpr.not_unit ((is_unit_norm ‚Ñö).2 (span_singleton_eq_top.1 h)))

local attribute [instance] number_field.ring_of_integers_algebra

lemma prime_of_norm_prime : prime pb.gen :=
begin
  rw [‚Üê span_singleton_prime (gen_ne_zero hpr), ‚Üê quotient.is_domain_iff_prime],
  haveI : nontrivial ((ùìû K) ‚ß∏ span {pb.gen}) := ‚ü®(quotient_not_trivial hpr).exists_pair_ne‚ü©,
  suffices : no_zero_divisors ((ùìû K) ‚ß∏ span {pb.gen}),
  { exact @no_zero_divisors.to_is_domain _ _ _ this },
  refine ‚ü®_‚ü©,
  rintro ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© hxy,
  by_contra' h,
  have h‚ÇÅ := h.1, have h‚ÇÇ := h.2,
  simp only [submodule.quotient.quot_mk_eq_mk, quotient.mk_eq_mk] at h‚ÇÅ h‚ÇÇ hxy,
  obtain ‚ü®n, hn‚ü© := exists_int_smodeq pb ‚ü®x, hx‚ü©,
  obtain ‚ü®m, hm‚ü© := exists_int_smodeq pb ‚ü®y, hy‚ü©,
  rw [smodeq.def, quotient.mk_eq_mk] at hn hm,
  rw [hn] at h‚ÇÅ hxy, rw [hm] at h‚ÇÇ hxy,
  obtain ‚ü®z, hz‚ü© := mem_span_singleton.1 (quotient.eq_zero_iff_mem.1 hxy),
  replace hz := congr_arg (norm ‚Ñö) hz,
  have hnm : (norm ‚Ñö) ((n : R) * (m : R)) = n ^ (finrank ‚Ñö K) * m ^ (finrank ‚Ñö K),
  { refine subtype.ext _,
    simp only [norm, monoid_hom.restrict_apply, mul_mem_class.coe_mul, subring_class.coe_int_cast,
      _root_.map_mul, monoid_hom.cod_restrict_apply, set_like.coe_mk, subsemiring_class.coe_pow],
    rw [show (n : K) = algebra_map ‚Ñö K (n : ‚Ñö), by simp, show (m : K) = algebra_map ‚Ñö K (m : ‚Ñö),
      by simp, algebra.norm_algebra_map, algebra.norm_algebra_map] },
  replace hz : (norm ‚Ñö pb.gen) ‚à£ n ^ (finrank ‚Ñö K) * m ^ (finrank ‚Ñö K),
  { refine ‚ü®norm ‚Ñö z, _‚ü©,
    rwa [‚Üê hnm, ‚Üê _root_.map_mul] },
  simp only [quotient.mk_eq_mk, map_int_cast] at h‚ÇÅ h‚ÇÇ,
  cases hpr.dvd_or_dvd hz with Hn Hm,
  { simpa [h‚ÇÅ] using quotient.eq_zero_iff_mem.2 (mem_span_singleton.2 (dvd_trans (dvd_norm ‚Ñö pb.gen)
      (ring_hom.map_dvd (algebra_map (ùìû ‚Ñö) R) (hpr.dvd_of_dvd_pow Hn)))) },
  { simpa [h‚ÇÇ] using quotient.eq_zero_iff_mem.2 (mem_span_singleton.2 (dvd_trans (dvd_norm ‚Ñö pb.gen)
      (ring_hom.map_dvd (algebra_map (ùìû ‚Ñö) R) (hpr.dvd_of_dvd_pow Hm)))) },
end
