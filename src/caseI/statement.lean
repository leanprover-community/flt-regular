import may_assume.lemmas
import number_theory.cyclotomic.factoring
import number_theory.cyclotomic.Unit_lemmas
import ready_for_mathlib.exists_eq_pow_of_mul_eq_pow
import ready_for_mathlib.roots_of_unity
import number_theory.cyclotomic.case_I

open finset nat is_cyclotomic_extension ideal polynomial int

open_locale big_operators number_field

namespace flt_regular

variables {p : ‚Ñï} (hpri : p.prime)

local notation `P` := (‚ü®p, hpri.pos‚ü© : ‚Ñï+)
local notation `K` := cyclotomic_field P ‚Ñö
local notation `R` := ùìû K

namespace caseI

/-- Statement of case I with additional assumptions. -/
def slightly_easier : Prop := ‚àÄ ‚¶Éa b c : ‚Ñ§‚¶Ñ ‚¶Ép : ‚Ñï‚¶Ñ (hpri : p.prime)
  (hreg : is_regular_number p hpri.pos) (hp5 : 5 ‚â§ p) (hprod : a * b * c ‚â† 0)
  (hgcd : is_unit (({a, b, c} : finset ‚Ñ§).gcd id))
  (hab : ¬¨a ‚â° b [ZMOD p]) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c), a ^ p + b ^ p ‚â† c ^ p

/-- Statement of case I. -/
def statement : Prop := ‚àÄ ‚¶Éa b c : ‚Ñ§‚¶Ñ ‚¶Ép : ‚Ñï‚¶Ñ (hpri : p.prime) (hreg : is_regular_number p hpri.pos)
  (hodd : p ‚â† 2) (hprod : a * b * c ‚â† 0) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c), a ^ p + b ^ p ‚â† c ^ p

lemma may_assume : slightly_easier ‚Üí statement :=
begin
  intro Heasy,
  intros a b c p hpri hreg hodd hprod hI H,
  have hp5 : 5 ‚â§ p,
  { by_contra' habs,
    have : p ‚àà finset.Ioo 2 5 := finset.mem_Icc.2 ‚ü®nat.lt_of_le_and_ne hpri.two_le hodd.symm,
      by linarith‚ü©,
    fin_cases this,
    { exact may_assume.p_ne_three hprod H rfl },
    { rw [show 4 = 2 * 2, from rfl] at hpri,
      refine nat.not_prime_mul one_lt_two one_lt_two hpri } },
  rcases may_assume.coprime H hprod with ‚ü®Hxyz, hunit, hprodxyx‚ü©,
  let d := ({a, b, c} : finset ‚Ñ§).gcd id,
  have hdiv : ¬¨‚Üëp ‚à£ (a / d) * (b / d) * (c / d),
  { have hadiv : d ‚à£ a := gcd_dvd (by simp),
    have hbdiv : d ‚à£ b := gcd_dvd (by simp),
    have hcdiv : d ‚à£ c := gcd_dvd (by simp),
    intro hdiv,
    replace hdiv := dvd_mul_of_dvd_right hdiv ((d * d) * d),
    rw [mul_assoc, ‚Üê mul_assoc d, ‚Üê mul_assoc d, int.mul_div_cancel' hadiv, mul_assoc,
      mul_comm a, mul_assoc (b / d), ‚Üê mul_assoc _ (b / d), int.mul_div_cancel' hbdiv,
      mul_comm, mul_assoc, mul_assoc, int.div_mul_cancel hcdiv, mul_comm, mul_assoc,
      mul_comm c, ‚Üê mul_assoc] at hdiv,
    exact hI hdiv },
  obtain ‚ü®X, Y, Z, H1, H2, H3, H4, H5‚ü© := a_not_cong_b hpri hp5 hprodxyx Hxyz hunit hdiv,
  exact Heasy hpri hreg hp5 H4 H2 H3 (Œª hfin, H5 hfin) H1
end

end caseI

lemma ab_coprime {a b c : ‚Ñ§} (H : a ^ p + b ^ p = c ^ p) (hpzero : p ‚â† 0)
  (hgcd : is_unit (({a, b, c} : finset ‚Ñ§).gcd id)) : is_coprime a b  :=
begin
  rw [‚Üê gcd_eq_one_iff_coprime],
  by_contra' h,
  obtain ‚ü®q, hqpri, hq‚ü© := exists_prime_and_dvd h,
  replace hqpri : prime (q : ‚Ñ§) := prime_iff_nat_abs_prime.2 (by simp [hqpri]),
  obtain ‚ü®n, hn‚ü© := hq,
  have haq : ‚Üëq ‚à£ a,
  { obtain ‚ü®m, hm‚ü© := int.gcd_dvd_left a b,
    exact ‚ü®n * m, by { rw [hm, hn], simp [mul_assoc] }‚ü© },
  have hbq : ‚Üëq ‚à£ b,
  { obtain ‚ü®m, hm‚ü© := int.gcd_dvd_right a b,
    exact ‚ü®n * m, by { rw [hm, hn], simp [mul_assoc] }‚ü© },
  have hcq : ‚Üëq ‚à£ c,
  { suffices : ‚Üëq ‚à£ c ^ p,
    { exact hqpri.dvd_of_dvd_pow this },
    rw [‚Üê H],
    exact dvd_add (dvd_pow haq hpzero) (dvd_pow hbq hpzero) },
  have Hq : ‚Üëq ‚à£ ({a, b, c} : finset ‚Ñ§).gcd id,
  { refine dvd_gcd (Œª x hx, _),
    simp only [mem_insert, mem_singleton] at hx,
    rcases hx with H | H | H;
    simpa [H] },
  exact not_is_unit_of_not_is_unit_dvd hqpri.not_unit Hq hgcd
end

theorem exists_ideal {a b c : ‚Ñ§} (h5p : 5 ‚â§ p) (H : a ^ p + b ^ p = c ^ p)
  (hgcd : is_unit (({a, b, c} : finset ‚Ñ§).gcd id)) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c)
  {Œ∂ : R} (hŒ∂ : Œ∂ ‚àà nth_roots_finset p R) : ‚àÉ I, span ({a + Œ∂ * b} : set R) = I ^ p :=
begin
  haveI : fact ((P : ‚Ñï).prime) := ‚ü®hpri‚ü©,
  classical,
  have H‚ÇÅ := congr_arg (algebra_map ‚Ñ§ R) H,
  simp only [eq_int_cast, int.cast_add, int.cast_pow] at H‚ÇÅ,
  have hŒ∂' := (zeta_spec P ‚Ñö K).unit'_coe,
  rw [pow_add_pow_eq_prod_add_zeta_runity_mul
      (hpri.eq_two_or_odd.resolve_left $ Œª h, by norm_num [h] at h5p) hŒ∂'] at H‚ÇÅ,
  replace H‚ÇÅ := congr_arg (Œª x, span ({x} : set R)) H‚ÇÅ,
  simp only [span_singleton_prod, ‚Üê span_singleton_pow] at H‚ÇÅ,
  obtain ‚ü®I, hI‚ü© := exists_eq_pow_of_prod_eq_pow p (span ({c} : set R)) (Œª Œ∑‚ÇÅ hŒ∑‚ÇÅ Œ∑‚ÇÇ hŒ∑‚ÇÇ hŒ∑, _) H‚ÇÅ Œ∂ hŒ∂,
  { exact ‚ü®I, hI‚ü© },
  { exact flt_ideals_coprime h5p H (ab_coprime H hpri.ne_zero hgcd) hŒ∑‚ÇÅ hŒ∑‚ÇÇ hŒ∑ caseI }
end

theorem is_principal {a b c : ‚Ñ§} {Œ∂ : R} (hreg : is_regular_number p hpri.pos) (hp5 : 5 ‚â§ p)
  (hgcd : is_unit (({a, b, c} : finset ‚Ñ§).gcd id)) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c)
  (H : a ^ p + b ^ p = c ^ p) (hŒ∂ : is_primitive_root Œ∂ p) :
  ‚àÉ (u : RÀ£) (Œ± : R), ‚Üëu * (Œ± ^ p) = ‚Üëa + Œ∂ * ‚Üëb :=
begin
  replace hŒ∂ := hŒ∂.mem_nth_roots_finset hpri.pos,
  obtain ‚ü®I, hI‚ü© := exists_ideal hpri hp5 H hgcd caseI hŒ∂,
  by_cases hIpzero : I ^ p = 0,
  { refine ‚ü®1, 0, _‚ü©,
    simp [hIpzero, zero_eq_bot, span_singleton_eq_bot] at hI,
    simp [hpri.pos, hI] },
  have hIzero : I ‚â† 0,
  { intro hIzero,
    simp only [hIzero, zero_pow hpri.pos] at hIpzero,
    exact hIpzero rfl },
  have hIprin : I.is_principal,
  { have : class_group.mk0 ‚ü®_, mem_non_zero_divisors_of_ne_zero hIpzero‚ü© = 1,
    { rw [class_group.mk0_eq_one_iff (mem_non_zero_divisors_of_ne_zero hIpzero)],
      exact ‚ü®‚ü®‚Üëa + Œ∂ * ‚Üëb, hI.symm‚ü©‚ü© },
    rw [‚Üê submonoid_class.mk_pow I (mem_non_zero_divisors_of_ne_zero hIzero), map_pow] at this,
    cases (dvd_prime hpri).1 (order_of_dvd_of_pow_eq_one this) with h1 habs,
    { exact (class_group.mk0_eq_one_iff _).1 (order_of_eq_one_iff.1 h1) },
    { exfalso,
      refine hpri.coprime_iff_not_dvd.1 hreg _,
      simp_rw [‚Üê habs],
      exact order_of_dvd_card_univ, } },
  obtain ‚ü®Œ±, hŒ±‚ü© := hIprin,
  replace hŒ± := congr_arg (Œª J, J ^ p) hŒ±,
  simp only [‚ÜêhI, submodule_span_eq, span_singleton_pow, span_singleton_eq_span_singleton] at hŒ±,
  obtain ‚ü®u, hu‚ü© := hŒ±,
  refine ‚ü®u‚Åª¬π, Œ±, _‚ü©,
  rw [‚Üê hu, mul_comm _ ‚Üëu, ‚Üê mul_assoc],
  simp
end
.

theorem ex_int_div {a b c : ‚Ñ§} {Œ∂ : R} (hpri : p.prime) (hp5 : 5 ‚â§ p)
  (hreg : is_regular_number p hpri.pos)
  (hprod : a * b * c ‚â† 0) (hŒ∂ : is_primitive_root Œ∂ p)
  (hgcd : is_unit (({a, b, c} : finset ‚Ñ§).gcd id))
  (hab : ¬¨a ‚â° b [ZMOD p]) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c) (H : a ^ p + b ^ p = c ^ p) :
  ‚àÉ (k : fin p), ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (2 * ‚Üëk) - ‚Üëb * Œ∂ ^ (2 * ‚Üëk - 1) :=
begin
  let Œ∂' := (Œ∂ : K),
  have hŒ∂' : is_primitive_root Œ∂' P := is_primitive_root.coe_submonoid_class_iff.2 hŒ∂,
  have : Œ∂ = (hŒ∂'.unit' : R) := by simp only [is_primitive_root.unit', set_like.eta, units.coe_mk],
  have hP : P ‚â† 2,
  { intro hP,
    rw [‚Üê pnat.coe_inj, pnat.mk_coe, pnat.coe_bit0, pnat.one_coe] at hP,
    norm_num [hP] at hp5 },
  haveI := (‚ü®hpri‚ü© : fact ((P : ‚Ñï).prime)),
  haveI diamond : is_cyclotomic_extension {P} ‚Ñö K := cyclotomic_field.is_cyclotomic_extension P ‚Ñö,
  obtain ‚ü®u, Œ±, hu‚ü© := is_principal hpri hreg hp5 hgcd caseI H hŒ∂,
  rw [this, mul_comm _ ‚Üëb, ‚Üê pow_one hŒ∂'.unit'] at hu,
  obtain ‚ü®k, hk‚ü© := @flt_regular.caseI.exists_int_sum_eq_zero P K _ _
    (by {convert diamond, by exact subsingleton.elim _ _ }) Œ∂ hŒ∂' hP _ a b 1 u Œ± hu.symm,
  simp only [zpow_one, zpow_neg, coe_coe, pnat.mk_coe, mem_span_singleton, ‚Üê this] at hk,
  have hpcoe : (p : ‚Ñ§) ‚â† 0 := by simp [hpri.ne_zero],
  refine ‚ü®‚ü®(k % p).nat_abs, _‚ü©, _‚ü©,
  { rw [‚Üê nat_abs_of_nat p],
    refine nat_abs_lt_nat_abs_of_nonneg_of_lt (mod_nonneg _ hpcoe) _,
    rw [nat_abs_of_nat],
    exact mod_lt_of_pos _ (by simp [hpri.pos]) },
  simp only [add_sub_assoc, sub_sub] at hk ‚ä¢,
  convert hk using 3,
  rw [mul_add, mul_comm ‚Üëa],
  congr' 1,
  { congr' 1,
    rw [‚Üê subtype.coe_inj],
    simp only [fin.coe_mk, subsemiring_class.coe_pow, _root_.coe_zpow, coe_coe,
      is_primitive_root.coe_unit'_coe],
    refine eq_of_div_eq_one _,
    rw [‚Üê zpow_coe_nat, ‚Üê zpow_sub‚ÇÄ (hŒ∂'.ne_zero hpri.ne_zero), hŒ∂'.zpow_eq_one_iff_dvd],
    simp only [pnat.mk_coe, nat.cast_mul, coe_nat_bit0, nat.cast_one, ‚Üêmul_sub, int.add_mod_mod,
      nat_abs_of_nonneg (mod_nonneg _ hpcoe)],
    refine dvd_mul_of_dvd_right _ _,
    nth_rewrite 1 [‚Üê int.div_add_mod k p],
    rw [‚Üêsub_sub, sub_right_comm, sub_self, zero_sub],
    exact (dvd_neg _ _).2 (dvd_mul_right _ _) },
  { sorry },
end

/-- Case I with additional assumptions. -/
theorem caseI_easier {a b c : ‚Ñ§} (hpri : p.prime)
  (hreg : is_regular_number p hpri.pos) (hp5 : 5 ‚â§ p) (hprod : a * b * c ‚â† 0)
  (hgcd : is_unit (({a, b, c} : finset ‚Ñ§).gcd id))
  (hab : ¬¨a ‚â° b [ZMOD p]) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c) : a ^ p + b ^ p ‚â† c ^ p := sorry

/-- CaseI. -/
theorem caseI {a b c : ‚Ñ§} {p : ‚Ñï} (hpri : p.prime) (hreg : is_regular_number p hpri.pos)
  (hodd : p ‚â† 2) (hprod : a * b * c ‚â† 0) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c) : a ^ p + b ^ p ‚â† c ^ p :=
flt_regular.caseI.may_assume (Œª x y z p‚ÇÅ Hpri Hreg HP5 Hprod Hunit Hxy HI,
    caseI_easier Hpri Hreg HP5 Hprod Hunit Hxy HI) hpri hreg hodd hprod caseI

end flt_regular
