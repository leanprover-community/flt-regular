import caseI.aux_lemmas

open finset nat is_cyclotomic_extension ideal polynomial int basis flt_regular.caseI

open_locale big_operators number_field

namespace flt_regular

variables {p : ‚Ñï} [hpri : fact p.prime]

local notation `P` := (‚ü®p, hpri.out.pos‚ü© : ‚Ñï+)
local notation `K` := cyclotomic_field P ‚Ñö
local notation `R` := ùìû K

namespace caseI

/-- Statement of case I with additional assumptions. -/
def slightly_easier : Prop := ‚àÄ ‚¶Éa b c : ‚Ñ§‚¶Ñ {p : ‚Ñï} [hpri : fact p.prime]
  (hreg : @is_regular_prime p hpri) (hp5 : 5 ‚â§ p)
  (hgcd : ({a, b, c} : finset ‚Ñ§).gcd id = 1)
  (hab : ¬¨a ‚â° b [ZMOD p]) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c), a ^ p + b ^ p ‚â† c ^ p

/-- Statement of case I. -/
def statement : Prop := ‚àÄ ‚¶Éa b c : ‚Ñ§‚¶Ñ {p : ‚Ñï} [hpri : fact p.prime]
  (hreg : @is_regular_prime p hpri) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c),
  a ^ p + b ^ p ‚â† c ^ p

lemma may_assume : slightly_easier ‚Üí statement :=
begin
  intro Heasy,
  intros a b c p hpri hreg hI H,
  have hodd : p ‚â† 2,
  { intro h,
    rw [h] at H hI,
    refine hI _,
    refine has_dvd.dvd.mul_left _ _,
    simp only [coe_nat_bit0, algebra_map.coe_one, ‚Üê even_iff_two_dvd] at ‚ä¢ hI,
    rw [‚Üê int.odd_iff_not_even] at hI,
    rw [‚Üê int.even_pow' (show 2 ‚â† 0, by norm_num), ‚Üê H],
    exact (odd.of_mul_left (odd.of_mul_left hI)).pow.add_odd
      (odd.of_mul_right (odd.of_mul_left hI)).pow },
  have hprod : a * b * c ‚â† 0,
  { intro h,
    simpa [h] using hI },
  have hp5 : 5 ‚â§ p,
  { by_contra' habs,
    have : p ‚àà finset.Ioo 2 5 := finset.mem_Icc.2 ‚ü®nat.lt_of_le_and_ne hpri.out.two_le hodd.symm,
      by linarith‚ü©,
    fin_cases this,
    { exact may_assume.p_ne_three hprod H rfl },
    { rw [show 4 = 2 * 2, from rfl] at hpri,
      refine nat.not_prime_mul one_lt_two one_lt_two hpri.out } },
  rcases may_assume.coprime H hprod with ‚ü®Hxyz, hunit, hprodxyx‚ü©,
  let d := ({a, b, c} : finset ‚Ñ§).gcd id,
  have hdiv : ¬¨‚Üëp ‚à£ (a / d) * (b / d) * (c / d),
  { have hadiv : d ‚à£ a := gcd_dvd (by simp),
    have hbdiv : d ‚à£ b := gcd_dvd (by simp),
    have hcdiv : d ‚à£ c := gcd_dvd (by simp),
    intro hdiv,
    replace hdiv := dvd_mul_of_dvd_right hdiv ((d * d) * d),
    rw [mul_assoc, ‚Üê mul_assoc d, ‚Üê mul_assoc d, int.mul_div_cancel' hadiv, mul_assoc,
      mul_comm a, mul_assoc (b / d), ‚Üê mul_assoc _ (b / d), int.mul_div_cancel' hbdiv,
      mul_comm, mul_assoc, mul_assoc, int.div_mul_cancel hcdiv, mul_comm, mul_assoc,
      mul_comm c, ‚Üê mul_assoc] at hdiv,
    exact hI hdiv },
  obtain ‚ü®X, Y, Z, H1, H2, H3, H4, H5‚ü© := a_not_cong_b hpri.out hp5 hprodxyx Hxyz hunit hdiv,
  exactI Heasy hreg hp5 H2 H3 (Œª hfin, H5 hfin) H1
end

end caseI

lemma ab_coprime {a b c : ‚Ñ§} (H : a ^ p + b ^ p = c ^ p) (hpzero : p ‚â† 0)
  (hgcd : ({a, b, c} : finset ‚Ñ§).gcd id = 1) : is_coprime a b  :=
begin
  rw [‚Üê gcd_eq_one_iff_coprime],
  by_contra' h,
  obtain ‚ü®q, hqpri, hq‚ü© := exists_prime_and_dvd h,
  replace hqpri : prime (q : ‚Ñ§) := prime_iff_nat_abs_prime.2 (by simp [hqpri]),
  obtain ‚ü®n, hn‚ü© := hq,
  have haq : ‚Üëq ‚à£ a,
  { obtain ‚ü®m, hm‚ü© := int.gcd_dvd_left a b,
    exact ‚ü®n * m, by { rw [hm, hn], simp [mul_assoc] }‚ü© },
  have hbq : ‚Üëq ‚à£ b,
  { obtain ‚ü®m, hm‚ü© := int.gcd_dvd_right a b,
    exact ‚ü®n * m, by { rw [hm, hn], simp [mul_assoc] }‚ü© },
  have hcq : ‚Üëq ‚à£ c,
  { suffices : ‚Üëq ‚à£ c ^ p,
    { exact hqpri.dvd_of_dvd_pow this },
    rw [‚Üê H],
    exact dvd_add (dvd_pow haq hpzero) (dvd_pow hbq hpzero) },
  have Hq : ‚Üëq ‚à£ ({a, b, c} : finset ‚Ñ§).gcd id,
  { refine dvd_gcd (Œª x hx, _),
    simp only [mem_insert, mem_singleton] at hx,
    rcases hx with H | H | H;
    simpa [H] },
  rw [hgcd] at Hq,
  exact hqpri.not_unit (is_unit_of_dvd_one _ Hq)
end

theorem exists_ideal {a b c : ‚Ñ§} (h5p : 5 ‚â§ p) (H : a ^ p + b ^ p = c ^ p)
  (hgcd : ({a, b, c} : finset ‚Ñ§).gcd id = 1) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c)
  {Œ∂ : R} (hŒ∂ : Œ∂ ‚àà nth_roots_finset p R) : ‚àÉ I, span ({a + Œ∂ * b} : set R) = I ^ p :=
begin
  haveI : fact ((P : ‚Ñï).prime) := ‚ü®hpri.out‚ü©,
  classical,
  have H‚ÇÅ := congr_arg (algebra_map ‚Ñ§ R) H,
  simp only [eq_int_cast, int.cast_add, int.cast_pow] at H‚ÇÅ,
  have hŒ∂' := (zeta_spec P ‚Ñö K).unit'_coe,
  rw [pow_add_pow_eq_prod_add_zeta_runity_mul
      (hpri.out.eq_two_or_odd.resolve_left $ Œª h, by norm_num [h] at h5p) hŒ∂'] at H‚ÇÅ,
  replace H‚ÇÅ := congr_arg (Œª x, span ({x} : set R)) H‚ÇÅ,
  simp only [span_singleton_prod, ‚Üê span_singleton_pow] at H‚ÇÅ,
  obtain ‚ü®I, hI‚ü© := exists_eq_pow_of_prod_eq_pow p (span ({c} : set R)) (Œª Œ∑‚ÇÅ hŒ∑‚ÇÅ Œ∑‚ÇÇ hŒ∑‚ÇÇ hŒ∑, _) H‚ÇÅ Œ∂ hŒ∂,
  { exact ‚ü®I, hI‚ü© },
  { exact flt_ideals_coprime h5p H (ab_coprime H hpri.out.ne_zero hgcd) hŒ∑‚ÇÅ hŒ∑‚ÇÇ hŒ∑ caseI }
end

theorem is_principal {a b c : ‚Ñ§} {Œ∂ : R} (hreg : is_regular_prime p) (hp5 : 5 ‚â§ p)
  (hgcd : ({a, b, c} : finset ‚Ñ§).gcd id = 1) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c)
  (H : a ^ p + b ^ p = c ^ p) (hŒ∂ : is_primitive_root Œ∂ p) :
  ‚àÉ (u : RÀ£) (Œ± : R), ‚Üëu * (Œ± ^ p) = ‚Üëa + Œ∂ * ‚Üëb :=
begin
  replace hŒ∂ := hŒ∂.mem_nth_roots_finset hpri.out.pos,
  obtain ‚ü®I, hI‚ü© := exists_ideal hp5 H hgcd caseI hŒ∂,
  by_cases hIpzero : I ^ p = 0,
  { refine ‚ü®1, 0, _‚ü©,
    simp [hIpzero, zero_eq_bot, span_singleton_eq_bot] at hI,
    simp [hpri.out.pos, hI] },
  have hIzero : I ‚â† 0,
  { intro hIzero,
    simp only [hIzero, zero_pow hpri.out.pos] at hIpzero,
    exact hIpzero rfl },
  have hIprin : I.is_principal,
  { have : class_group.mk0 ‚ü®_, mem_non_zero_divisors_of_ne_zero hIpzero‚ü© = 1,
    { rw [class_group.mk0_eq_one_iff (mem_non_zero_divisors_of_ne_zero hIpzero)],
      exact ‚ü®‚ü®‚Üëa + Œ∂ * ‚Üëb, hI.symm‚ü©‚ü© },
    rw [‚Üê submonoid_class.mk_pow I (mem_non_zero_divisors_of_ne_zero hIzero), map_pow] at this,
    cases (dvd_prime hpri.out).1 (order_of_dvd_of_pow_eq_one this) with h1 habs,
    { exact (class_group.mk0_eq_one_iff _).1 (order_of_eq_one_iff.1 h1) },
    { exfalso,
      refine hpri.out.coprime_iff_not_dvd.1 hreg _,
      simp_rw [‚Üê habs],
      exact order_of_dvd_card_univ, } },
  obtain ‚ü®Œ±, hŒ±‚ü© := hIprin,
  replace hŒ± := congr_arg (Œª J, J ^ p) hŒ±,
  simp only [‚ÜêhI, submodule_span_eq, span_singleton_pow, span_singleton_eq_span_singleton] at hŒ±,
  obtain ‚ü®u, hu‚ü© := hŒ±,
  refine ‚ü®u‚Åª¬π, Œ±, _‚ü©,
  rw [‚Üê hu, mul_comm _ ‚Üëu, ‚Üê mul_assoc],
  simp
end

theorem ex_fin_div {a b c : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p)
  (hreg : is_regular_prime p) (hŒ∂ : is_primitive_root Œ∂ p)
  (hgcd : ({a, b, c} : finset ‚Ñ§).gcd id = 1) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c)
  (H : a ^ p + b ^ p = c ^ p) :
  ‚àÉ (k‚ÇÅ k‚ÇÇ : fin p), k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p] ‚àß ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï) :=
begin
  let Œ∂' := (Œ∂ : K),
  have hŒ∂' : is_primitive_root Œ∂' P := is_primitive_root.coe_submonoid_class_iff.2 hŒ∂,
  have : Œ∂ = (hŒ∂'.unit' : R) := by simp only [is_primitive_root.unit', set_like.eta, units.coe_mk],
  have hP : P ‚â† 2,
  { intro hP,
    rw [‚Üê pnat.coe_inj, pnat.mk_coe, pnat.coe_bit0, pnat.one_coe] at hP,
    norm_num [hP] at hp5 },
  haveI := (‚ü®hpri.out‚ü© : fact ((P : ‚Ñï).prime)),
  haveI diamond : is_cyclotomic_extension {P} ‚Ñö K := cyclotomic_field.is_cyclotomic_extension P ‚Ñö,
  obtain ‚ü®u, Œ±, hu‚ü© := is_principal hreg hp5 hgcd caseI H hŒ∂,
  rw [this, mul_comm _ ‚Üëb, ‚Üê pow_one hŒ∂'.unit'] at hu,
  obtain ‚ü®k, hk‚ü© := @flt_regular.caseI.exists_int_sum_eq_zero P K _ _
    (by {convert diamond, by exact subsingleton.elim _ _ }) Œ∂ hŒ∂' hP _ a b 1 u Œ± hu.symm,
  simp only [zpow_one, zpow_neg, coe_coe, pnat.mk_coe, mem_span_singleton, ‚Üê this] at hk,
  have hpcoe : (p : ‚Ñ§) ‚â† 0 := by simp [hpri.out.ne_zero],
  refine ‚ü®‚ü®(2 * k % p).nat_abs, _‚ü©, ‚ü®((2 * k - 1) % p).nat_abs, _‚ü©, _, _‚ü©,
  repeat { rw [‚Üê nat_abs_of_nat p],
    refine nat_abs_lt_nat_abs_of_nonneg_of_lt (mod_nonneg _ hpcoe) _,
    rw [nat_abs_of_nat],
    exact mod_lt_of_pos _ (by simp [hpri.out.pos]) },
  { simp [nat_abs_of_nonneg (mod_nonneg _ hpcoe), ‚Üê zmod.int_coe_eq_int_coe_iff] },
  simp only [add_sub_assoc, sub_sub] at hk ‚ä¢,
  convert hk using 3,
  rw [mul_add, mul_comm ‚Üëa, ‚Üê mul_assoc _ ‚Üëb, mul_comm _ ‚Üëb, mul_assoc ‚Üëb],
  congr' 2,
  { rw [‚Üê subtype.coe_inj],
    simp only [fin.coe_mk, subsemiring_class.coe_pow, _root_.coe_zpow', coe_coe,
      is_primitive_root.coe_unit'_coe],
    refine eq_of_div_eq_one _,
    rw [‚Üê zpow_coe_nat, ‚Üê zpow_sub‚ÇÄ (hŒ∂'.ne_zero hpri.out.ne_zero), hŒ∂'.zpow_eq_one_iff_dvd],
    simp [nat_abs_of_nonneg (mod_nonneg _ hpcoe), ‚Üê zmod.int_coe_zmod_eq_zero_iff_dvd] },
  { rw [‚Üê subtype.coe_inj],
    simp only [fin.coe_mk, subsemiring_class.coe_pow, mul_mem_class.coe_mul, _root_.coe_zpow',
      coe_coe, is_primitive_root.coe_unit'_coe, is_primitive_root.coe_inv_unit'_coe],
    refine eq_of_div_eq_one _,
    rw [‚Üê zpow_coe_nat, ‚Üê zpow_sub_one‚ÇÄ (hŒ∂'.ne_zero hpri.out.ne_zero),
      ‚Üê zpow_sub‚ÇÄ (hŒ∂'.ne_zero hpri.out.ne_zero), hŒ∂'.zpow_eq_one_iff_dvd, pnat.mk_coe],
    simp [nat_abs_of_nonneg (mod_nonneg _ hpcoe), ‚Üê zmod.int_coe_zmod_eq_zero_iff_dvd] },
end

/-- Auxiliary function -/
def f (a b : ‚Ñ§) (k‚ÇÅ k‚ÇÇ : ‚Ñï) : ‚Ñï ‚Üí ‚Ñ§ := Œª x, if x = 0 then a else if x = 1 then b else
  if x = k‚ÇÅ then -a else if x = k‚ÇÇ then -b else 0

lemma auxf' (hp5 : 5 ‚â§ p) (a b : ‚Ñ§) (k‚ÇÅ k‚ÇÇ : fin p) : ‚àÉ i ‚àà range p, f a b k‚ÇÅ k‚ÇÇ (i : ‚Ñï) = 0 :=
begin
  have h0 : 0 < p := by linarith,
  have h1 : 1 < p := by linarith,
  let s := ({0, 1, k‚ÇÅ, k‚ÇÇ} : finset ‚Ñï),
  have : s.card ‚â§ 4,
  { repeat { refine le_trans (card_insert_le _ _) (succ_le_succ _) },
    exact rfl.ge },
  replace this : s.card < 5 := lt_of_le_of_lt this (by norm_num),
  have hs : s ‚äÜ range p := insert_subset.2 ‚ü®mem_range.2 h0, insert_subset.2 ‚ü®mem_range.2 h1,
    insert_subset.2 ‚ü®mem_range.2 (fin.is_lt _), singleton_subset_iff.2 (mem_range.2 (fin.is_lt _))‚ü©‚ü©‚ü©,
  have hcard := card_sdiff hs,
  replace hcard : (range p \ s).nonempty,
  { rw [‚Üê card_pos, hcard, card_range],
    exact nat.sub_pos_of_lt (lt_of_lt_of_le this hp5) },
  obtain ‚ü®i, hi‚ü© := hcard,
  refine ‚ü®i, sdiff_subset _ _ hi, _‚ü©,
  have hi0 : i ‚â† 0 := Œª h, by simpa [h] using hi,
  have hi1 : i ‚â† 1 := Œª h, by simpa [h] using hi,
  have hik‚ÇÅ : i ‚â† k‚ÇÅ := Œª h, by simpa [h] using hi,
  have hik‚ÇÇ : i ‚â† k‚ÇÇ := Œª h, by simpa [h] using hi,
  simp [f, hi0, hi1, hik‚ÇÅ, hik‚ÇÇ]
end

lemma auxf (hp5 : 5 ‚â§ p) (a b : ‚Ñ§) (k‚ÇÅ k‚ÇÇ : fin p) : ‚àÉ i : fin p, f a b k‚ÇÅ k‚ÇÇ (i : ‚Ñï) = 0 :=
begin
  obtain ‚ü®i, hrange, hi‚ü© := auxf' hp5 a b k‚ÇÅ k‚ÇÇ,
  exact ‚ü®‚ü®i, mem_range.1 hrange‚ü©, hi‚ü©
end

local attribute [-instance] cyclotomic_field.algebra

/-- Case I with additional assumptions. -/
theorem caseI_easier {a b c : ‚Ñ§} (p : ‚Ñï) [hpri : fact p.prime]
  (hreg : is_regular_prime p) (hp5 : 5 ‚â§ p)
  (hgcd : ({a, b, c} : finset ‚Ñ§).gcd id = 1)
  (hab : ¬¨a ‚â° b [ZMOD p]) (caseI : ¬¨ ‚Üëp ‚à£ a * b * c) : a ^ p + b ^ p ‚â† c ^ p :=
begin
  haveI := (‚ü®hpri.out‚ü© : fact ((P : ‚Ñï).prime)),
  haveI diamond : is_cyclotomic_extension {P} ‚Ñö K,
  { convert cyclotomic_field.is_cyclotomic_extension P ‚Ñö,
    exact subsingleton.elim _ _ },
  set Œ∂ := zeta P ‚Ñ§ R with hŒ∂def,
  have hŒ∂ := zeta_spec P ‚Ñ§ R,

  intro H,
  obtain ‚ü®k‚ÇÅ, k‚ÇÇ, hcong, hdiv‚ü© := ex_fin_div hp5 hreg hŒ∂ hgcd caseI H,
  have key : ‚Üë(p : ‚Ñ§) ‚à£ ‚àë j in range p, (f a b k‚ÇÅ k‚ÇÇ j) ‚Ä¢ Œ∂ ^ j,
  { convert hdiv using 1,
    { simp },
    have h01 : 0 ‚â† 1 := zero_ne_one,
    have h0k‚ÇÅ : 0 ‚â† ‚Üëk‚ÇÅ := aux0k‚ÇÅ hpri.out hp5 hŒ∂ caseI hcong hdiv,
    have h0k‚ÇÇ : 0 ‚â† ‚Üëk‚ÇÇ := aux0k‚ÇÇ hpri.out hp5 hŒ∂ hab hcong hdiv,
    have h1k‚ÇÅ : 1 ‚â† ‚Üëk‚ÇÅ := aux1k‚ÇÅ hpri.out hp5 hŒ∂ hab hcong hdiv,
    have h1k‚ÇÇ : 1 ‚â† ‚Üëk‚ÇÇ := aux1k‚ÇÇ hpri.out hp5 hŒ∂ caseI hcong hdiv,
    have hk‚ÇÅk‚ÇÇ : (k‚ÇÅ : ‚Ñï) ‚â† (k‚ÇÇ : ‚Ñï) := auxk‚ÇÅk‚ÇÇ hpri.out hcong,
    simp_rw [f, ite_smul, sum_ite, filter_filter, ‚Üê ne.def, ne_and_eq_iff_right h01,
      and_assoc, ne_and_eq_iff_right h1k‚ÇÅ, ne_and_eq_iff_right h0k‚ÇÅ, ne_and_eq_iff_right hk‚ÇÅk‚ÇÇ,
      ne_and_eq_iff_right h1k‚ÇÇ, ne_and_eq_iff_right h0k‚ÇÇ, finset.range_filter_eq],
    simp only [hpri.out.pos, hpri.out.one_lt, if_true, zsmul_eq_mul, sum_singleton, pow_zero,
      mul_one, pow_one, fin.is_lt, neg_smul, sum_neg_distrib, ne.def, filter_congr_decidable, zero_smul, sum_const_zero, add_zero],
    ring },
  rw [sum_range] at key,
  refine caseI (has_dvd.dvd.mul_right (has_dvd.dvd.mul_right _ _) _),
  simpa [f] using dvd_coeff_cycl_integer hŒ∂ (by exact auxf hp5 a b k‚ÇÅ k‚ÇÇ) key ‚ü®0, hpri.out.pos‚ü©
end

/-- CaseI. -/
theorem caseI {a b c : ‚Ñ§} {p : ‚Ñï} [fact p.prime] (hreg : is_regular_prime p)
  (caseI : ¬¨ ‚Üëp ‚à£ a * b * c) : a ^ p + b ^ p ‚â† c ^ p :=
flt_regular.caseI.may_assume (Œª x y z p‚ÇÅ Hpri Hreg Hp5 Hunit Hxy HI H,
  by exactI caseI_easier p‚ÇÅ Hreg Hp5 Hunit Hxy HI H) hreg caseI

end flt_regular
