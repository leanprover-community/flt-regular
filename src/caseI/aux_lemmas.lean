import may_assume.lemmas
import number_theory.cyclotomic.factoring
import number_theory.cyclotomic.Unit_lemmas
import ready_for_mathlib.exists_eq_pow_of_mul_eq_pow
import ready_for_mathlib.roots_of_unity
import number_theory.cyclotomic.case_I
import ready_for_mathlib.finset
import ready_for_mathlib.logic

open finset nat is_cyclotomic_extension ideal polynomial int basis

open_locale big_operators number_field

local attribute [-instance] cyclotomic_field.algebra

namespace flt_regular

variables {p : ‚Ñï} (hpri : p.prime)

local notation `P` := (‚ü®p, hpri.pos‚ü© : ‚Ñï+)
local notation `K` := cyclotomic_field P ‚Ñö
local notation `R` := ùìû K

namespace caseI

lemma two_lt (hp5 : 5 ‚â§ p) : 2 < p := by linarith

section zerok‚ÇÅ

lemma aux_cong0k‚ÇÅ {k : fin p} (hcong : k ‚â° -1 [ZMOD p]) : k = ‚ü®p.pred, pred_lt hpri.ne_zero‚ü© :=
begin
  refine fin.ext _,
  rw [fin.coe_mk, ‚Üê zmod.val_cast_of_lt (fin.is_lt k)],
  suffices : ((k : ‚Ñ§) : zmod p).val = p.pred, simpa,
  rw [‚Üê zmod.int_coe_eq_int_coe_iff] at hcong,
  rw [hcong, cast_neg, int.cast_one, pred_eq_sub_one],
  haveI : ne_zero p := ‚ü®hpri.ne_zero‚ü©,
  haveI : fact (p.prime) := ‚ü®hpri‚ü©,
  haveI : fact (1 < p) := ‚ü®hpri.one_lt‚ü©,
  simp [zmod.neg_val, zmod.val_one]
end

/-- Auxiliary function. -/
def f0k‚ÇÅ (b : ‚Ñ§) (p : ‚Ñï) : ‚Ñï ‚Üí ‚Ñ§ := Œª x, if x = 1 then b else if x = p.pred then -b else 0

lemma auxf0k‚ÇÅ (hp5 : 5 ‚â§ p) (b : ‚Ñ§) : ‚àÉ i : fin P, f0k‚ÇÅ b p (i : ‚Ñï) = 0 :=
begin
  refine ‚ü®‚ü®2, two_lt hp5‚ü©, _‚ü©,
  have h1 : ((‚ü®2, two_lt hp5‚ü© : fin p) : ‚Ñï) ‚â† 1,
  { intro h,
    simp only [fin.ext_iff, fin.coe_mk] at h,
    exact one_lt_two.ne h.symm },
  have hpred : ((‚ü®2, two_lt hp5‚ü© : fin p) : ‚Ñï) ‚â† p.pred,
  { intro h,
    simp only [fin.ext_iff, fin.coe_mk] at h,
    replace h := h.symm,
    rw [nat.pred_eq_succ_iff] at h,
    linarith },
  simp only [f0k‚ÇÅ, h1, if_false, hpred]
end

lemma aux0k‚ÇÅ {a b c : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hŒ∂ : is_primitive_root Œ∂ p)
  (caseI : ¬¨ ‚Üëp ‚à£ a * b * c) {k‚ÇÅ k‚ÇÇ : fin p} (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p])
  (hdiv : ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï)) : 0 ‚â† ‚Üëk‚ÇÅ :=
begin
  haveI := (‚ü®hpri‚ü© : fact ((P : ‚Ñï).prime)),
  haveI diamond : is_cyclotomic_extension {P} ‚Ñö K,
  { convert cyclotomic_field.is_cyclotomic_extension P ‚Ñö,
    exact subsingleton.elim _ _ },

  symmetry,
  intro habs,
  rw [show (k‚ÇÅ : ‚Ñ§) = 0, by simpa using habs, zero_sub] at hcong,
  rw [habs, pow_zero, mul_one, add_sub_cancel', aux_cong0k‚ÇÅ hpri hcong] at hdiv,
  nth_rewrite 0 [show Œ∂ = Œ∂ ^ ((‚ü®1, hpri.one_lt‚ü© : fin p) : ‚Ñï), by simp] at hdiv,
  have key : ‚Üë(p : ‚Ñ§) ‚à£ ‚àë j in range p, (f0k‚ÇÅ b p j) ‚Ä¢ Œ∂ ^ j,
  { convert hdiv using 1,
    { simp },
    have h : 1 ‚â† p.pred := Œª h, by linarith [pred_eq_succ_iff.1 h.symm],
    simp_rw [f0k‚ÇÅ, ite_smul, sum_ite, filter_filter, ‚Üê ne.def, ne_and_eq_iff_right h,
      finset.range_filter_eq],
    simp [hpri.one_lt, pred_lt (hpri.ne_zero), sub_eq_add_neg] },
  rw [sum_range] at key,
  refine caseI (has_dvd.dvd.mul_right (has_dvd.dvd.mul_left _ _) _),
  simpa [f0k‚ÇÅ] using dvd_coeff_cycl_integer (by exact hŒ∂) (auxf0k‚ÇÅ hpri hp5 b) key ‚ü®1, hpri.one_lt‚ü©,
end

end zerok‚ÇÅ

section zerok‚ÇÇ

/-- Auxiliary function -/
def f0k‚ÇÇ (a b : ‚Ñ§) : ‚Ñï ‚Üí ‚Ñ§ := Œª x, if x = 0 then a - b else if x = 1 then b - a else 0

lemma aux_cong0k‚ÇÇ {k : fin p} (hcong : k ‚â° 1 [ZMOD p]) : k = ‚ü®1, hpri.one_lt‚ü© :=
begin
  refine fin.ext _,
  rw [fin.coe_mk, ‚Üê zmod.val_cast_of_lt (fin.is_lt k)],
  suffices : ((k : ‚Ñ§) : zmod p).val = 1, simpa,
  rw [‚Üê zmod.int_coe_eq_int_coe_iff] at hcong,
  rw [hcong, int.cast_one],
  haveI : fact (p.prime) := ‚ü®hpri‚ü©,
  simp [zmod.val_one]
end

lemma auxf0k‚ÇÇ (hp5 : 5 ‚â§ p) (a b : ‚Ñ§) : ‚àÉ i : fin P, f0k‚ÇÇ a b (i : ‚Ñï) = 0 :=
begin
  refine ‚ü®‚ü®2, two_lt hp5‚ü©, _‚ü©,
  have h1 : ((‚ü®2, two_lt hp5‚ü© : fin p) : ‚Ñï) ‚â† 1,
  { intro h,
    simp only [fin.ext_iff, fin.coe_mk] at h,
    exact one_lt_two.ne h.symm },
  have hzero : ((‚ü®2, two_lt hp5‚ü© : fin p) : ‚Ñï) ‚â† 0,
  { intro h,
    simp only [fin.ext_iff, fin.coe_mk] at h,
    linarith },
  simp only [f0k‚ÇÇ, h1, if_false, hzero]
end

lemma aux0k‚ÇÇ {a b : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hŒ∂ : is_primitive_root Œ∂ p)
  (hab : ¬¨a ‚â° b [ZMOD p]) {k‚ÇÅ k‚ÇÇ : fin p} (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p])
  (hdiv : ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï)) : 0 ‚â† ‚Üëk‚ÇÇ :=
begin
  haveI := (‚ü®hpri‚ü© : fact ((P : ‚Ñï).prime)),
  haveI diamond : is_cyclotomic_extension {P} ‚Ñö K,
  { convert cyclotomic_field.is_cyclotomic_extension P ‚Ñö,
    exact subsingleton.elim _ _ },

  symmetry,
  intro habs,
  replace hcong := hcong.symm,
  rw [show (k‚ÇÇ : ‚Ñ§) = 0, by simpa using habs, ‚Üê zmod.int_coe_eq_int_coe_iff,
    int.cast_sub, int.cast_zero, sub_eq_zero, zmod.int_coe_eq_int_coe_iff] at hcong,
  rw [habs, pow_zero, mul_one, aux_cong0k‚ÇÇ hpri hcong, fin.coe_mk, pow_one, add_sub_assoc,
    ‚Üê sub_mul, add_sub_right_comm, show Œ∂ = Œ∂ ^ ((‚ü®1, hpri.one_lt‚ü© : fin p) : ‚Ñï), by simp,
    ‚Üê neg_sub ‚Üëa, neg_mul, ‚Üê sub_eq_add_neg] at hdiv,
  have key : ‚Üë(p : ‚Ñ§) ‚à£ ‚àë j in range p, (f0k‚ÇÇ a b j) ‚Ä¢ Œ∂ ^ j,
  { convert hdiv using 1,
    { simp },
    simp_rw [f0k‚ÇÇ, ite_smul, sum_ite, filter_filter, ‚Üê ne.def, ne_and_eq_iff_right zero_ne_one,
      finset.range_filter_eq],
    simp only [hpri.pos, hpri.one_lt, if_true, zsmul_eq_mul, int.cast_sub, sum_singleton, pow_zero,
      mul_one, pow_one, ne.def, filter_congr_decidable, zero_smul, sum_const_zero, add_zero,
      fin.coe_mk],
    ring },
  rw [sum_range] at key,
  refine hab _,
  symmetry,
  rw [‚Üê zmod.int_coe_eq_int_coe_iff, zmod.int_coe_eq_int_coe_iff_dvd_sub],
  simpa [f0k‚ÇÇ] using dvd_coeff_cycl_integer (by exact hŒ∂) (auxf0k‚ÇÇ hpri hp5 a b) key ‚ü®0, hpri.pos‚ü©
end

end zerok‚ÇÇ

section onek_one

lemma aux_cong1k‚ÇÅ {k : fin p} (hcong : k ‚â° 0 [ZMOD p]) : k = ‚ü®0, hpri.pos‚ü© :=
begin
  refine fin.ext _,
  rw [fin.coe_mk, ‚Üê zmod.val_cast_of_lt (fin.is_lt k)],
  suffices : ((k : ‚Ñ§) : zmod p).val = 0, simpa,
  rw [‚Üê zmod.int_coe_eq_int_coe_iff] at hcong,
  rw [hcong, int.cast_zero],
  haveI : fact (p.prime) := ‚ü®hpri‚ü©,
  simp
end

lemma aux1k‚ÇÅ {a b : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hŒ∂ : is_primitive_root Œ∂ p)
  (hab : ¬¨a ‚â° b [ZMOD p]) {k‚ÇÅ k‚ÇÇ : fin p} (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p])
  (hdiv : ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï)) : 1 ‚â† ‚Üëk‚ÇÅ :=
begin
  intro habs,
  have h := aux0k‚ÇÇ hpri hp5 hŒ∂ hab hcong hdiv,
  rw [show (k‚ÇÅ : ‚Ñ§) = 1, by simpa using habs.symm, sub_self] at hcong,
  have := (aux_cong1k‚ÇÅ hpri hcong),
  simp only [‚Üêfin.coe_eq_coe, fin.coe_mk] at this,
  exact h.symm this
end

end onek_one

section onek_two

/-- Auxiliary function -/
def f1k‚ÇÇ (a : ‚Ñ§) : ‚Ñï ‚Üí ‚Ñ§ := Œª x, if x = 0 then a else if x = 2 then -a else 0

lemma aux_cong1k‚ÇÇ {k : fin p} (hpri : p.prime) (hp5 : 5 ‚â§ p) (hcong : k ‚â° 1 + 1 [ZMOD p]) :
  k = ‚ü®2, two_lt hp5‚ü© :=
begin
  refine fin.ext _,
  rw [fin.coe_mk, ‚Üê zmod.val_cast_of_lt (fin.is_lt k)],
  suffices : ((k : ‚Ñ§) : zmod p).val = 2, simpa,
  rw [‚Üê zmod.int_coe_eq_int_coe_iff] at hcong,
  rw [hcong],
  simp only [int.cast_add, algebra_map.coe_one],
  haveI : fact (p.prime) := ‚ü®hpri‚ü©,
  have := congr_arg nat.succ (nat.succ_pred_eq_of_pos hpri.pred_pos),
  rw [succ_pred_prime hpri] at this,
  rw [zmod.val_add, zmod.val_one, ‚Üê nat.mod_add_mod, ‚Üê this, one_mod, this, nat.mod_eq_of_lt],
  linarith
end

lemma auxf1k‚ÇÇ (a : ‚Ñ§) : ‚àÉ i : fin P, f1k‚ÇÇ a (i : ‚Ñï) = 0 :=
begin
  refine ‚ü®‚ü®1, hpri.one_lt‚ü©, _‚ü©,
  have h2 : ((‚ü®1, hpri.one_lt‚ü© : fin p) : ‚Ñï) ‚â† 2,
  { intro h,
    simp only [fin.ext_iff, fin.coe_mk] at h,
    linarith },
  have hzero : ((‚ü®1, hpri.one_lt‚ü© : fin p) : ‚Ñï) ‚â† 0,
  { intro h,
    simp only [fin.ext_iff, fin.coe_mk] at h,
    linarith },
  simp only [f1k‚ÇÇ, h2, if_false, hzero]
end

lemma aux1k‚ÇÇ {a b c : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hŒ∂ : is_primitive_root Œ∂ p)
  (caseI : ¬¨ ‚Üëp ‚à£ a * b * c) {k‚ÇÅ k‚ÇÇ : fin p} (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p])
  (hdiv : ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï)) : 1 ‚â† ‚Üëk‚ÇÇ :=
begin
  haveI := (‚ü®hpri‚ü© : fact ((P : ‚Ñï).prime)),
  haveI diamond : is_cyclotomic_extension {P} ‚Ñö K,
  { convert cyclotomic_field.is_cyclotomic_extension P ‚Ñö,
    exact subsingleton.elim _ _ },

  symmetry,
  intro habs,
  replace hcong := hcong.symm,
  rw [show (k‚ÇÇ : ‚Ñ§) = 1, by simpa using habs, ‚Üê zmod.int_coe_eq_int_coe_iff, int.cast_sub,
    sub_eq_iff_eq_add, ‚Üê int.cast_add, zmod.int_coe_eq_int_coe_iff] at hcong,
  rw [habs, pow_one, (aux_cong1k‚ÇÇ hpri hp5 hcong)] at hdiv,
  ring_nf at hdiv,
  rw [add_mul, one_mul, add_comm, mul_comm, mul_neg] at hdiv,
  have key : ‚Üë(p : ‚Ñ§) ‚à£ ‚àë j in range p, (f1k‚ÇÇ a j) ‚Ä¢ Œ∂ ^ j,
  { convert hdiv using 1,
    { simp },
    simp_rw [f1k‚ÇÇ, ite_smul, sum_ite, filter_filter, ‚Üê ne.def, ne_and_eq_iff_right
      (show 0 ‚â† 2, by norm_num), finset.range_filter_eq],
    simp [hpri.pos, two_lt hp5, fin.coe_mk (two_lt hp5),eq_self_iff_true, -fin.mk_bit0] },
  rw [sum_range] at key,
  refine caseI (has_dvd.dvd.mul_right (has_dvd.dvd.mul_right _ _) _),
  simpa [f1k‚ÇÇ] using dvd_coeff_cycl_integer (by exact hŒ∂) (auxf1k‚ÇÇ hpri a) key ‚ü®0, hpri.pos‚ü©
end

end onek_two

section kone_ktwo

lemma auxk‚ÇÅk‚ÇÇ {k‚ÇÅ k‚ÇÇ : fin p} (hpri : p.prime) (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p]) : (k‚ÇÅ : ‚Ñï) ‚â† (k‚ÇÇ : ‚Ñï) :=
begin
  haveI := (‚ü®hpri‚ü© : fact (p.prime)),
  intro habs,
  rw [show (k‚ÇÅ : ‚Ñ§) = (k‚ÇÇ : ‚Ñï), by simpa using habs, ‚Üê zmod.int_coe_eq_int_coe_iff, ‚Üê sub_eq_zero,
    int.cast_sub, sub_sub_eq_add_sub, coe_coe, add_sub_cancel', algebra_map.coe_one] at hcong,
  exact one_ne_zero hcong
end

end kone_ktwo

end caseI

end flt_regular
