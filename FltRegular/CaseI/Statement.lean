import FltRegular.CaseI.AuxLemmas

open Finset Nat IsCyclotomicExtension Ideal Polynomial Int Basis FltRegular.CaseI

open scoped BigOperators NumberField

namespace FltRegular

variable {p : ‚Ñï} [hpri : Fact p.Prime]

set_option quotPrecheck false
local notation "P" => (‚ü®p, hpri.out.pos‚ü© : ‚Ñï+)

local notation "K" => CyclotomicField P ‚Ñö

local notation "R" => ùìû K

namespace CaseI

/-- Statement of case I with additional assumptions. -/
def SlightlyEasier : Prop :=
  ‚àÄ ‚¶Éa b c : ‚Ñ§‚¶Ñ {p : ‚Ñï} [hpri : Fact p.Prime] (_ : @IsRegularPrime p hpri) (_ : 5 ‚â§ p)
    (_ : ({a, b, c} : Finset ‚Ñ§).gcd id = 1) (_ : ¬¨a ‚â° b [ZMOD p]) (_ : ¬¨‚Üëp ‚à£ a * b * c),
    a ^ p + b ^ p ‚â† c ^ p

/-- Statement of case I. -/
def Statement : Prop :=
  ‚àÄ ‚¶Éa b c : ‚Ñ§‚¶Ñ {p : ‚Ñï} [hpri : Fact p.Prime] (_ : @IsRegularPrime p hpri)
    (_ : ¬¨‚Üëp ‚à£ a * b * c), a ^ p + b ^ p ‚â† c ^ p

theorem may_assume : SlightlyEasier ‚Üí Statement := by
  intro Heasy
  intro a b c p hpri hreg hI H
  have hodd : p ‚â† 2 := by
    intro h
    rw [h] at H hI
    refine' hI _
    refine' Dvd.dvd.mul_left _ _
    simp only [Nat.cast_ofNat] at hI ‚ä¢
    rw [‚Üê even_iff_two_dvd, ‚Üê Int.odd_iff_not_even] at hI
    rw [‚Üê even_iff_two_dvd, ‚Üê Int.even_pow' (show 2 ‚â† 0 by norm_num), ‚Üê H]
    exact (Int.Odd.of_mul_left (Odd.of_mul_left hI)).pow.add_odd
      (Int.Odd.of_mul_right (Odd.of_mul_left hI)).pow
  have hprod : a * b * c ‚â† 0 := by
    intro h
    simp [h] at hI
  have hp5 : 5 ‚â§ p := by
    by_contra' habs
    have : p ‚àà Finset.Ioo 2 5 :=
     (Finset.mem_Ioo).2 ‚ü®Nat.lt_of_le_and_ne hpri.out.two_le hodd.symm, by linarith‚ü©
    fin_cases this
    ¬∑ exact MayAssume.p_ne_three hprod H rfl
    ¬∑ rw [show 2 + 1 + 1 = 2 * 2 from rfl] at hpri
      refine' Nat.not_prime_mul one_lt_two one_lt_two hpri.out
  rcases MayAssume.coprime H hprod with ‚ü®Hxyz, hunit, hprodxyx‚ü©
  let d := ({a, b, c} : Finset ‚Ñ§).gcd id
  have hdiv : ¬¨‚Üëp ‚à£ a / d * (b / d) * (c / d) :=
    by
    have hadiv : d ‚à£ a := gcd_dvd (by simp)
    have hbdiv : d ‚à£ b := gcd_dvd (by simp)
    have hcdiv : d ‚à£ c := gcd_dvd (by simp)
    intro hdiv
    replace hdiv := dvd_mul_of_dvd_right hdiv (d * d * d)
    rw [mul_assoc, ‚Üê mul_assoc d, ‚Üê mul_assoc d, Int.mul_ediv_cancel' hadiv, mul_assoc, mul_comm a,
      mul_assoc (b / d), ‚Üê mul_assoc _ (b / d), Int.mul_ediv_cancel' hbdiv, mul_comm, mul_assoc,
      mul_assoc, Int.ediv_mul_cancel hcdiv, mul_comm, mul_assoc, mul_comm c, ‚Üê mul_assoc] at hdiv
    exact hI hdiv
  obtain ‚ü®X, Y, Z, H1, H2, H3, _, H5‚ü© := a_not_cong_b hpri.out hp5 hprodxyx Hxyz hunit hdiv
  exact Heasy hreg hp5 H2 H3 (fun hfin => H5 hfin) H1

end CaseI

theorem ab_coprime {a b c : ‚Ñ§} (H : a ^ p + b ^ p = c ^ p) (hpzero : p ‚â† 0)
    (hgcd : ({a, b, c} : Finset ‚Ñ§).gcd id = 1) : IsCoprime a b := by
  rw [‚Üê gcd_eq_one_iff_coprime]
  by_contra' h
  obtain ‚ü®q, hqpri, hq‚ü© := exists_prime_and_dvd h
  replace hqpri : Prime (q : ‚Ñ§) := prime_iff_natAbs_prime.2 (by simp [hqpri])
  obtain ‚ü®n, hn‚ü© := hq
  have haq : ‚Üëq ‚à£ a := by
    obtain ‚ü®m, hm‚ü© := Int.gcd_dvd_left a b
    exact ‚ü®n * m, by rw [hm, hn]; simp [mul_assoc]‚ü©
  have hbq : ‚Üëq ‚à£ b := by
    obtain ‚ü®m, hm‚ü© := Int.gcd_dvd_right a b
    exact ‚ü®n * m, by rw [hm, hn]; simp [mul_assoc]‚ü©
  have hcq : ‚Üëq ‚à£ c := by
    suffices ‚Üëq ‚à£ c ^ p by exact hqpri.dvd_of_dvd_pow this
    rw [‚Üê H]
    exact dvd_add (dvd_pow haq hpzero) (dvd_pow hbq hpzero)
  have Hq : ‚Üëq ‚à£ ({a, b, c} : Finset ‚Ñ§).gcd id := by
    refine' dvd_gcd fun x hx => _
    simp only [mem_insert, mem_singleton] at hx
    rcases hx with (H | H | H) <;> simpa [H]
  rw [hgcd] at Hq
  exact hqpri.not_unit (isUnit_of_dvd_one Hq)

theorem exists_ideal {a b c : ‚Ñ§} (h5p : 5 ‚â§ p) (H : a ^ p + b ^ p = c ^ p)
    (hgcd : ({a, b, c} : Finset ‚Ñ§).gcd id = 1) (caseI : ¬¨‚Üëp ‚à£ a * b * c) {Œ∂ : R}
    (hŒ∂ : Œ∂ ‚àà nthRootsFinset p R) : ‚àÉ I, span ({a + Œ∂ * b} : Set R) = I ^ p :=
  by
  haveI : Fact (P : ‚Ñï).Prime := ‚ü®hpri.out‚ü©
  classical
  have H‚ÇÅ := congr_arg (algebraMap ‚Ñ§ R) H
  simp only [eq_intCast, Int.cast_add, Int.cast_pow] at H‚ÇÅ
  have hŒ∂' := (zeta_spec P ‚Ñö K).unit'_coe
  rw [pow_add_pow_eq_prod_add_zeta_runity_mul
      (hpri.out.eq_two_or_odd.resolve_left fun h => by norm_num [h] at h5p ) hŒ∂'] at H‚ÇÅ
  replace H‚ÇÅ := congr_arg (fun x => span ({x} : Set R)) H‚ÇÅ
  simp only [‚Üê prod_span_singleton, ‚Üê span_singleton_pow] at H‚ÇÅ
  have hdom : IsDomain (Ideal (ùìû (CyclotomicField ‚ü®p, hpri.out.pos‚ü© ‚Ñö))) := Ideal.isDomain
  let gcddom : GCDMonoid (Ideal (ùìû (CyclotomicField ‚ü®p, hpri.out.pos‚ü© ‚Ñö))) :=
    Ideal.normalizedGcdMonoid.toGcdMonoid
  obtain ‚ü®I, hI‚ü© :=
    @Finset.exists_eq_pow_of_mul_eq_pow_of_coprime _ _ _ hdom gcddom _ _ _ _ _
      (fun Œ∑‚ÇÅ hŒ∑‚ÇÅ Œ∑‚ÇÇ hŒ∑‚ÇÇ hŒ∑ => _) H‚ÇÅ Œ∂ hŒ∂
  ¬∑ exact ‚ü®I, hI‚ü©
  ¬∑ exact fltIdeals_coprime h5p H (ab_coprime H hpri.out.ne_zero hgcd) hŒ∑‚ÇÅ hŒ∑‚ÇÇ hŒ∑ caseI

theorem is_principal {a b c : ‚Ñ§} {Œ∂ : R} (hreg : IsRegularPrime p) (hp5 : 5 ‚â§ p)
    (hgcd : ({a, b, c} : Finset ‚Ñ§).gcd id = 1) (caseI : ¬¨‚Üëp ‚à£ a * b * c) (H : a ^ p + b ^ p = c ^ p)
    (hŒ∂ : IsPrimitiveRoot Œ∂ p) : ‚àÉ (u : RÀ£) (Œ± : R), ‚Üëu * Œ± ^ p = ‚Üëa + Œ∂ * ‚Üëb := by
  replace hŒ∂ := hŒ∂.mem_nth_roots_finset hpri.out.pos
  obtain ‚ü®I, hI‚ü© := exists_ideal hp5 H hgcd caseI hŒ∂
  by_cases hIpzero : I ^ p = 0
  ¬∑ refine' ‚ü®1, 0, _‚ü©
    simp [hIpzero, zero_eq_bot, span_singleton_eq_bot] at hI
    simp [hpri.out.pos, hI]
  have hIzero : I ‚â† 0 := by
    intro hIzero
    simp only [hIzero, zero_pow hpri.out.pos] at hIpzero
    exact hIpzero rfl
  have hIprin : I.is_principal :=
    by
    have : ClassGroup.mk0 ‚ü®_, mem_nonZeroDivisors_of_ne_zero hIpzero‚ü© = 1 :=
      by
      rw [ClassGroup.mk0_eq_one_iff (mem_nonZeroDivisors_of_ne_zero hIpzero)]
      exact ‚ü®‚ü®‚Üëa + Œ∂ * ‚Üëb, hI.symm‚ü©‚ü©
    rw [‚Üê SubmonoidClass.mk_pow I (mem_nonZeroDivisors_of_ne_zero hIzero), map_pow] at this
    cases' (dvd_prime hpri.out).1 (orderOf_dvd_of_pow_eq_one this) with h1 habs
    ¬∑ exact (ClassGroup.mk0_eq_one_iff _).1 (orderOf_eq_one_iff.1 h1)
    ¬∑ exfalso
      refine' hpri.out.coprime_iff_not_dvd.1 hreg _
      simp_rw [‚Üê habs]
      exact orderOf_dvd_card_univ
  obtain ‚ü®Œ±, hŒ±‚ü© := hIprin
  replace hŒ± := congr_arg (fun J => J ^ p) hŒ±
  simp only [‚Üê hI, submodule_span_eq, span_singleton_pow, span_singleton_eq_span_singleton] at hŒ±
  obtain ‚ü®u, hu‚ü© := hŒ±
  refine' ‚ü®u‚Åª¬π, Œ±, _‚ü©
  rw [‚Üê hu, mul_comm _ ‚Üëu, ‚Üê mul_assoc]
  simp only [Units.inv_mul, one_mul]

theorem ex_fin_div {a b c : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hreg : IsRegularPrime p)
    (hŒ∂ : IsPrimitiveRoot Œ∂ p) (hgcd : ({a, b, c} : Finset ‚Ñ§).gcd id = 1) (caseI : ¬¨‚Üëp ‚à£ a * b * c)
    (H : a ^ p + b ^ p = c ^ p) :
    ‚àÉ k‚ÇÅ k‚ÇÇ : Fin p,
      k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p] ‚àß ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï) := by
  let Œ∂' := (Œ∂ : K)
  have hŒ∂' : IsPrimitiveRoot Œ∂' P := IsPrimitiveRoot.coe_submonoidClass_iff.2 hŒ∂
  have : Œ∂ = (hŒ∂'.unit' : R) := by simp only [IsPrimitiveRoot.unit', SetLike.eta, Units.val_mk]
  have hP : P ‚â† 2 := by
    intro hP
    rw [‚Üê PNat.coe_inj, PNat.mk_coe, PNat.coe_bit0, PNat.one_coe] at hP
    norm_num [hP] at hp5
  haveI := (‚ü®hpri.out‚ü© : Fact (P : ‚Ñï).Prime)
  obtain ‚ü®u, Œ±, hu‚ü© := is_principal hreg hp5 hgcd caseI H hŒ∂
  rw [this, mul_comm _ ‚Üëb, ‚Üê pow_one hŒ∂'.unit'] at hu
  obtain ‚ü®k, hk‚ü© := FltRegular.CaseI.exists_int_sum_eq_zero hŒ∂' hP a b 1 hu.symm
  simp only [zpow_one, zpow_neg, coe_coe, PNat.mk_coe, mem_span_singleton, ‚Üê this] at hk
  have hpcoe : (p : ‚Ñ§) ‚â† 0 := by simp [hpri.out.ne_zero]
  refine' ‚ü®‚ü®(2 * k % p).natAbs, _‚ü©, ‚ü®((2 * k - 1) % p).natAbs, _‚ü©, _, _‚ü©
  repeat'
    rw [‚Üê nat_abs_of_nat p]
    refine' nat_abs_lt_nat_abs_of_nonneg_of_lt (mod_nonneg _ hpcoe) _
    rw [nat_abs_of_nat]
    exact mod_lt_of_pos _ (by simp [hpri.out.pos])
  ¬∑ simp [nat_abs_of_nonneg (mod_nonneg _ hpcoe), ‚Üê ZMod.int_cast_eq_int_cast_iff]
  simp only [add_sub_assoc, sub_sub] at hk ‚ä¢
  convert hk using 3
  rw [mul_add, mul_comm ‚Üëa, ‚Üê mul_assoc _ ‚Üëb, mul_comm _ ‚Üëb, mul_assoc ‚Üëb]
  congr 2
  ¬∑ rw [‚Üê Subtype.coe_inj]
    simp only [Fin.val_mk, SubsemiringClass.coe_pow, _root_.coe_zpow', coe_coe,
      IsPrimitiveRoot.coe_unit'_coe]
    refine' eq_of_div_eq_one _
    rw [‚Üê zpow_ofNat, ‚Üê zpow_sub‚ÇÄ (hŒ∂'.ne_zero hpri.out.ne_zero), hŒ∂'.zpow_eq_one_iff_dvd]
    simp [nat_abs_of_nonneg (mod_nonneg _ hpcoe), ‚Üê ZMod.int_cast_zmod_eq_zero_iff_dvd]
  ¬∑ rw [‚Üê Subtype.coe_inj]
    simp only [Fin.val_mk, SubsemiringClass.coe_pow, MulMemClass.coe_mul, _root_.coe_zpow', coe_coe,
      IsPrimitiveRoot.coe_unit'_coe, IsPrimitiveRoot.coe_inv_unit'_coe]
    refine' eq_of_div_eq_one _
    rw [‚Üê zpow_ofNat, ‚Üê zpow_sub_one‚ÇÄ (hŒ∂'.ne_zero hpri.out.ne_zero), ‚Üê
      zpow_sub‚ÇÄ (hŒ∂'.ne_zero hpri.out.ne_zero), hŒ∂'.zpow_eq_one_iff_dvd, PNat.mk_coe]
    simp [nat_abs_of_nonneg (mod_nonneg _ hpcoe), ‚Üê ZMod.int_cast_zmod_eq_zero_iff_dvd]

/-- Auxiliary function -/
def f (a b : ‚Ñ§) (k‚ÇÅ k‚ÇÇ : ‚Ñï) : ‚Ñï ‚Üí ‚Ñ§ := fun x =>
  if x = 0 then a else if x = 1 then b else if x = k‚ÇÅ then -a else if x = k‚ÇÇ then -b else 0

theorem auxf' (hp5 : 5 ‚â§ p) (a b : ‚Ñ§) (k‚ÇÅ k‚ÇÇ : Fin p) :
    ‚àÉ i ‚àà range p, f a b k‚ÇÅ k‚ÇÇ (i : ‚Ñï) = 0 := by
  have h0 : 0 < p := by linarith
  have h1 : 1 < p := by linarith
  let s := ({0, 1, k‚ÇÅ, k‚ÇÇ} : Finset ‚Ñï)
  have : s.card ‚â§ 4 := by
    repeat' refine' le_trans (card_insert_le _ _) (succ_le_succ _)
    exact rfl.ge
  replace this : s.card < 5 := lt_of_le_of_lt this (by norm_num)
  have hs : s ‚äÜ range p :=
    insert_subset.2
      ‚ü®mem_range.2 h0,
        insert_subset.2
          ‚ü®mem_range.2 h1,
            insert_subset.2
              ‚ü®mem_range.2 (Fin.is_lt _), singleton_subset_iff.2 (mem_range.2 (Fin.is_lt _))‚ü©‚ü©‚ü©
  have hcard := card_sdiff hs
  replace hcard : (range p \ s).Nonempty
  ¬∑ rw [‚Üê card_pos, hcard, card_range]
    exact Nat.sub_pos_of_lt (lt_of_lt_of_le this hp5)
  obtain ‚ü®i, hi‚ü© := hcard
  refine' ‚ü®i, sdiff_subset _ _ hi, _‚ü©
  have hi0 : i ‚â† 0 := fun h => by simpa [h] using hi
  have hi1 : i ‚â† 1 := fun h => by simpa [h] using hi
  have hik‚ÇÅ : i ‚â† k‚ÇÅ := fun h => by simpa [h] using hi
  have hik‚ÇÇ : i ‚â† k‚ÇÇ := fun h => by simpa [h] using hi
  simp [f, hi0, hi1, hik‚ÇÅ, hik‚ÇÇ]

theorem auxf (hp5 : 5 ‚â§ p) (a b : ‚Ñ§) (k‚ÇÅ k‚ÇÇ : Fin p) : ‚àÉ i : Fin p, f a b k‚ÇÅ k‚ÇÇ (i : ‚Ñï) = 0 :=
  by
  obtain ‚ü®i, hrange, hi‚ü© := auxf' hp5 a b k‚ÇÅ k‚ÇÇ
  exact ‚ü®‚ü®i, mem_range.1 hrange‚ü©, hi‚ü©

/-- Case I with additional assumptions. -/
theorem caseI_easier {a b c : ‚Ñ§} (p : ‚Ñï) [hpri : Fact p.Prime] (hreg : IsRegularPrime p)
    (hp5 : 5 ‚â§ p) (hgcd : ({a, b, c} : Finset ‚Ñ§).gcd id = 1) (hab : ¬¨a ‚â° b [ZMOD p])
    (caseI : ¬¨‚Üëp ‚à£ a * b * c) : a ^ p + b ^ p ‚â† c ^ p := by
  haveI := (‚ü®hpri.out‚ü© : Fact (P : ‚Ñï).Prime)
  set Œ∂ := zeta P ‚Ñ§ R with hŒ∂def
  have hŒ∂ := zeta_spec P ‚Ñ§ R
  intro H
  obtain ‚ü®k‚ÇÅ, k‚ÇÇ, hcong, hdiv‚ü© := ex_fin_div hp5 hreg hŒ∂ hgcd caseI H
  have key : ‚Üë(p : ‚Ñ§) ‚à£ ‚àë j in range p, f a b k‚ÇÅ k‚ÇÇ j ‚Ä¢ Œ∂ ^ j :=
    by
    convert hdiv using 1
    have h01 : 0 ‚â† 1 := zero_ne_one
    have h0k‚ÇÅ : 0 ‚â† ‚Üëk‚ÇÅ := aux0k‚ÇÅ hpri.out hp5 hŒ∂ caseI hcong hdiv
    have h0k‚ÇÇ : 0 ‚â† ‚Üëk‚ÇÇ := aux0k‚ÇÇ hpri.out hp5 hŒ∂ hab hcong hdiv
    have h1k‚ÇÅ : 1 ‚â† ‚Üëk‚ÇÅ := aux1k‚ÇÅ hpri.out hp5 hŒ∂ hab hcong hdiv
    have h1k‚ÇÇ : 1 ‚â† ‚Üëk‚ÇÇ := aux1k‚ÇÇ hpri.out hp5 hŒ∂ caseI hcong hdiv
    have hk‚ÇÅk‚ÇÇ : (k‚ÇÅ : ‚Ñï) ‚â† (k‚ÇÇ : ‚Ñï) := auxk‚ÇÅk‚ÇÇ hpri.out hcong
    simp_rw [f, ite_smul, sum_ite, filter_filter, ‚Üê Ne.def, ne_and_eq_iff_right h01, and_assoc',
      ne_and_eq_iff_right h1k‚ÇÅ, ne_and_eq_iff_right h0k‚ÇÅ, ne_and_eq_iff_right hk‚ÇÅk‚ÇÇ,
      ne_and_eq_iff_right h1k‚ÇÇ, ne_and_eq_iff_right h0k‚ÇÇ, Finset.range_filter_eq]
    simp only [hpri.out.pos, hpri.out.one_lt, if_true, zsmul_eq_mul, sum_singleton, pow_zero,
      mul_one, pow_one, Fin.is_lt, neg_smul, sum_neg_distrib, Ne.def, filter_congr_decidable,
      zero_smul, sum_const_zero, add_zero]
    ring
  rw [sum_range] at key
  refine' caseI (Dvd.Dvd.mul_right (Dvd.Dvd.mul_right _ _) _)
  simpa [f] using dvd_coeff_cycl_integer hŒ∂ (auxf hp5 a b k‚ÇÅ k‚ÇÇ) key ‚ü®0, hpri.out.pos‚ü©

/-- CaseI. -/
theorem caseI {a b c : ‚Ñ§} {p : ‚Ñï} [Fact p.Prime] (hreg : IsRegularPrime p)
    (caseI : ¬¨‚Üëp ‚à£ a * b * c) : a ^ p + b ^ p ‚â† c ^ p :=
  FltRegular.CaseI.may_assume
    (fun x y z p‚ÇÅ Hpri Hreg Hp5 Hunit Hxy HI H => caseI_easier p‚ÇÅ Hreg Hp5 Hunit Hxy HI H) hreg
    caseI

end FltRegular
