import FltRegular.MayAssume.Lemmas
import FltRegular.NumberTheory.Cyclotomic.Factoring
import FltRegular.NumberTheory.Cyclotomic.UnitLemmas
import FltRegular.NumberTheory.Cyclotomic.CaseI

open Finset Nat IsCyclotomicExtension Ideal Polynomial Int Basis

open scoped BigOperators NumberField

namespace FltRegular

variable {p : ‚Ñï} (hpri : p.Prime)

set_option quotPrecheck false
local notation "P" => (‚ü®p, hpri.pos‚ü© : ‚Ñï+)

local notation "K" => CyclotomicField P ‚Ñö

local notation "R" => ùìû K
 
 
namespace CaseI

theorem two_lt (hp5 : 5 ‚â§ p) : 2 < p := by linarith

section Zerok‚ÇÅ

theorem aux_cong0k‚ÇÅ {k : Fin p} (hcong : k ‚â° -1 [ZMOD p]) :
  k = ‚ü®p.pred, pred_lt hpri.ne_zero‚ü© := by
  refine' Fin.ext _
  rw [Fin.val_mk, ‚Üê ZMod.val_cast_of_lt (Fin.is_lt k)]
  suffices : ((k : ‚Ñ§) : ZMod p).val = p.pred; simpa
  rw [‚Üê ZMod.int_cast_eq_int_cast_iff] at hcong
  rw [hcong, cast_neg, Int.cast_one, pred_eq_sub_one]
  haveI : NeZero p := ‚ü®hpri.ne_zero‚ü©
  haveI : Fact p.Prime := ‚ü®hpri‚ü©
  haveI : Fact (1 < p) := ‚ü®hpri.one_lt‚ü©
  simp [ZMod.neg_val, ZMod.val_one]

/-- Auxiliary function. -/
def f0k‚ÇÅ (b : ‚Ñ§) (p : ‚Ñï) : ‚Ñï ‚Üí ‚Ñ§ := fun x => if x = 1 then b else if x = p.pred then -b else 0

theorem auxf0k‚ÇÅ (hp5 : 5 ‚â§ p) (b : ‚Ñ§) : ‚àÉ i : Fin P, f0k‚ÇÅ b p (i : ‚Ñï) = 0 := by
  refine' ‚ü®‚ü®2, two_lt hp5‚ü©, _‚ü©
  have hpred : ((‚ü®2, two_lt hp5‚ü© : Fin p) : ‚Ñï) ‚â† p.pred := by
    intro h
    simp only [Fin.ext_iff, Fin.val_mk] at h
    replace h := h.symm
    rw [Nat.pred_eq_succ_iff] at h
    linarith
  simp only [f0k‚ÇÅ, OfNat.ofNat_ne_one, ite_false, ite_eq_right_iff, neg_eq_zero]
  intro h2
  exfalso
  apply hpred
  simp [h2]

theorem aux0k‚ÇÅ {a b c : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hŒ∂ : IsPrimitiveRoot Œ∂ p)
    (caseI : ¬¨‚Üëp ‚à£ a * b * c) {k‚ÇÅ k‚ÇÇ : Fin p} (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p])
    (hdiv : ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï)) : 0 ‚â† (‚Üëk‚ÇÅ : ‚Ñï) := by
  symm
  intro habs
  rw [show (k‚ÇÅ : ‚Ñ§) = 0 by simpa using habs, zero_sub] at hcong
  rw [habs, _root_.pow_zero, mul_one, add_sub_cancel', aux_cong0k‚ÇÅ hpri hcong] at hdiv
  nth_rw 1 [show Œ∂ = Œ∂ ^ ((‚ü®1, hpri.one_lt‚ü© : Fin p) : ‚Ñï) by simp] at hdiv
  have key : ‚Üë(p : ‚Ñ§) ‚à£ ‚àë j in range p, f0k‚ÇÅ b p j ‚Ä¢ Œ∂ ^ j := by
    convert hdiv using 1
    have h : 1 ‚â† p.pred := fun h => by linarith [pred_eq_succ_iff.1 h.symm]
    simp_rw [f0k‚ÇÅ, ite_smul, sum_ite, filter_filter, ‚Üê Ne.def, ne_and_eq_iff_right h,
      Finset.range_filter_eq]
    simp [hpri.one_lt, pred_lt hpri.ne_zero, sub_eq_add_neg]
  rw [sum_range] at key
  refine' caseI (Dvd.dvd.mul_right (Dvd.dvd.mul_left _ _) _)
  replace hpri : (P : ‚Ñï).Prime := hpri
  simpa [f0k‚ÇÅ] using dvd_coeff_cycl_integer hpri hŒ∂ (auxf0k‚ÇÅ hpri hp5 b) key ‚ü®1, hpri.one_lt‚ü©

end Zerok‚ÇÅ

section Zerok‚ÇÇ

/-- Auxiliary function -/
def f0k‚ÇÇ (a b : ‚Ñ§) : ‚Ñï ‚Üí ‚Ñ§ := fun x => if x = 0 then a - b else if x = 1 then b - a else 0

theorem aux_cong0k‚ÇÇ {k : Fin p} (hcong : k ‚â° 1 [ZMOD p]) : k = ‚ü®1, hpri.one_lt‚ü© := by
  refine' Fin.ext _
  rw [Fin.val_mk, ‚Üê ZMod.val_cast_of_lt (Fin.is_lt k)]
  suffices : ((k : ‚Ñ§) : ZMod p).val = 1; simpa
  rw [‚Üê ZMod.int_cast_eq_int_cast_iff] at hcong
  rw [hcong, Int.cast_one]
  haveI : Fact p.Prime := ‚ü®hpri‚ü©
  simp [ZMod.val_one]

theorem auxf0k‚ÇÇ (hp5 : 5 ‚â§ p) (a b : ‚Ñ§) : ‚àÉ i : Fin P, f0k‚ÇÇ a b (i : ‚Ñï) = 0 := by
  refine' ‚ü®‚ü®2, two_lt hp5‚ü©, _‚ü©
  have h1 : ((‚ü®2, two_lt hp5‚ü© : Fin p) : ‚Ñï) ‚â† 1 := by
    intro h
    simp only [Fin.ext_iff, Fin.val_mk] at h
  have hzero : ((‚ü®2, two_lt hp5‚ü© : Fin p) : ‚Ñï) ‚â† 0 := by
    intro h
    simp only [Fin.ext_iff, Fin.val_mk] at h
  simp only [f0k‚ÇÇ, h1, if_false, hzero]

theorem aux0k‚ÇÇ {a b : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hŒ∂ : IsPrimitiveRoot Œ∂ p) (hab : ¬¨a ‚â° b [ZMOD p])
    {k‚ÇÅ k‚ÇÇ : Fin p} (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p])
    (hdiv : ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï)) : (0 : ‚Ñï) ‚â† ‚Üëk‚ÇÇ := by
  haveI := (‚ü®hpri‚ü© : Fact (P : ‚Ñï).Prime)
  symm
  intro habs
  replace hcong := hcong.symm
  rw [show (k‚ÇÇ : ‚Ñ§) = 0 by simpa using habs, ‚Üê ZMod.int_cast_eq_int_cast_iff, Int.cast_sub,
    Int.cast_zero, sub_eq_zero, ZMod.int_cast_eq_int_cast_iff] at hcong
  rw [habs, _root_.pow_zero, mul_one, aux_cong0k‚ÇÇ hpri hcong, Fin.val_mk, pow_one, add_sub_assoc,
    ‚Üê sub_mul, add_sub_right_comm, show Œ∂ = Œ∂ ^ ((‚ü®1, hpri.one_lt‚ü© : Fin p) : ‚Ñï) by simp] at hdiv
  have key : ‚Üë(p : ‚Ñ§) ‚à£ ‚àë j in range p, f0k‚ÇÇ a b j ‚Ä¢ Œ∂ ^ j := by
    convert hdiv using 1
    simp_rw [f0k‚ÇÇ, ite_smul, sum_ite, filter_filter, ‚Üê Ne.def, ne_and_eq_iff_right zero_ne_one,
      Finset.range_filter_eq]
    simp only [hpri.pos, hpri.one_lt, if_true, zsmul_eq_mul, Int.cast_sub, sum_singleton,
      _root_.pow_zero, mul_one, pow_one, Ne.def, zero_smul, sum_const_zero, add_zero, Fin.val_mk]
  rw [sum_range] at key
  refine' hab _
  symm
  rw [‚Üê ZMod.int_cast_eq_int_cast_iff, ZMod.int_cast_eq_int_cast_iff_dvd_sub]
  have hpri‚ÇÅ : (P : ‚Ñï).Prime := hpri
  simpa [f0k‚ÇÇ] using dvd_coeff_cycl_integer hpri‚ÇÅ hŒ∂ (auxf0k‚ÇÇ hpri hp5 a b) key ‚ü®0, hpri.pos‚ü©

end Zerok‚ÇÇ

section OnekOne

theorem aux_cong1k‚ÇÅ {k : Fin p} (hcong : k ‚â° 0 [ZMOD p]) : k = ‚ü®0, hpri.pos‚ü© := by
  refine' Fin.ext _
  rw [Fin.val_mk, ‚Üê ZMod.val_cast_of_lt (Fin.is_lt k)]
  suffices : ((k : ‚Ñ§) : ZMod p).val = 0; simpa
  rw [‚Üê ZMod.int_cast_eq_int_cast_iff] at hcong
  rw [hcong, Int.cast_zero]
  haveI : Fact p.Prime := ‚ü®hpri‚ü©
  simp

theorem aux1k‚ÇÅ {a b : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hŒ∂ : IsPrimitiveRoot Œ∂ p) (hab : ¬¨a ‚â° b [ZMOD p])
    {k‚ÇÅ k‚ÇÇ : Fin p} (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p])
    (hdiv : ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï)) : (1 : ‚Ñï) ‚â† ‚Üëk‚ÇÅ := by
  intro habs
  have h := aux0k‚ÇÇ hpri hp5 hŒ∂ hab hcong hdiv
  rw [show (k‚ÇÅ : ‚Ñ§) = 1 by simpa using habs.symm, sub_self] at hcong
  have := aux_cong1k‚ÇÅ hpri hcong
  simp only [‚Üê Fin.val_eq_val, Fin.val_mk] at this
  exact h.symm this

end OnekOne

section OnekTwo

/-- Auxiliary function -/
def f1k‚ÇÇ (a : ‚Ñ§) : ‚Ñï ‚Üí ‚Ñ§ := fun x => if x = 0 then a else if x = 2 then -a else 0

theorem aux_cong1k‚ÇÇ {k : Fin p} (hpri : p.Prime) (hp5 : 5 ‚â§ p) (hcong : k ‚â° 1 + 1 [ZMOD p]) :
    k = ‚ü®2, two_lt hp5‚ü© := by
  refine' Fin.ext _
  rw [Fin.val_mk, ‚Üê ZMod.val_cast_of_lt (Fin.is_lt k)]
  suffices : ((k : ‚Ñ§) : ZMod p).val = 2; simpa
  rw [‚Üê ZMod.int_cast_eq_int_cast_iff] at hcong
  rw [hcong]
  simp only [Int.cast_add, algebraMap.coe_one]
  haveI : Fact p.Prime := ‚ü®hpri‚ü©
  have := congr_arg Nat.succ (Nat.succ_pred_eq_of_pos hpri.pred_pos)
  rw [succ_pred_prime hpri] at this
  rw [ZMod.val_add, Int.cast_one, ZMod.val_one, ‚Üê Nat.mod_add_mod, ‚Üê this, one_mod, this,
    Nat.mod_eq_of_lt]
  linarith

theorem auxf1k‚ÇÇ (a : ‚Ñ§) : ‚àÉ i : Fin P, f1k‚ÇÇ a (i : ‚Ñï) = 0 := by
  refine' ‚ü®‚ü®1, hpri.one_lt‚ü©, _‚ü©
  have h2 : ((‚ü®1, hpri.one_lt‚ü© : Fin p) : ‚Ñï) ‚â† 2 :=
    by
    intro h
    simp only [Fin.ext_iff, Fin.val_mk] at h
  have hzero : ((‚ü®1, hpri.one_lt‚ü© : Fin p) : ‚Ñï) ‚â† 0 :=
    by
    intro h
    simp only [Fin.ext_iff, Fin.val_mk] at h
  simp only [f1k‚ÇÇ, h2, if_false, hzero]

theorem aux1k‚ÇÇ {a b c : ‚Ñ§} {Œ∂ : R} (hp5 : 5 ‚â§ p) (hŒ∂ : IsPrimitiveRoot Œ∂ p)
    (caseI : ¬¨‚Üëp ‚à£ a * b * c) {k‚ÇÅ k‚ÇÇ : Fin p} (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p])
    (hdiv : ‚Üëp ‚à£ ‚Üëa + ‚Üëb * Œ∂ - ‚Üëa * Œ∂ ^ (k‚ÇÅ : ‚Ñï) - ‚Üëb * Œ∂ ^ (k‚ÇÇ : ‚Ñï)) : (1 : ‚Ñï) ‚â† ‚Üëk‚ÇÇ := by
  haveI := (‚ü®hpri‚ü© : Fact (P : ‚Ñï).Prime)
  symm
  intro habs
  replace hcong := hcong.symm
  rw [show (k‚ÇÇ : ‚Ñ§) = 1 by simpa using habs, ‚Üê ZMod.int_cast_eq_int_cast_iff, Int.cast_sub,
    sub_eq_iff_eq_add, ‚Üê Int.cast_add, ZMod.int_cast_eq_int_cast_iff] at hcong
  rw [habs, pow_one, aux_cong1k‚ÇÇ hpri hp5 hcong] at hdiv
  ring_nf at hdiv
  have key : ‚Üë(p : ‚Ñ§) ‚à£ ‚àë j in range p, f1k‚ÇÇ a j ‚Ä¢ Œ∂ ^ j := by
    rw [Int.cast_ofNat]
    suffices : ‚àë j in range p, f1k‚ÇÇ a j ‚Ä¢ Œ∂ ^ j = ‚Üëa - ‚Üëa * Œ∂ ^ 2
    ¬∑ rwa [this]
    simp_rw [f1k‚ÇÇ, ite_smul, sum_ite, filter_filter, ‚Üê Ne.def, ne_and_eq_iff_right
      (show 0 ‚â† 2 by norm_num), Finset.range_filter_eq]
    simp only [hpri.pos, ite_true, zsmul_eq_mul, sum_singleton, _root_.pow_zero, mul_one, two_lt hp5, neg_smul,
  sum_neg_distrib, ne_eq, mem_range, not_and, not_not, zero_smul, sum_const_zero, add_zero]
    ring
  rw [sum_range] at key
  refine' caseI (Dvd.dvd.mul_right (Dvd.dvd.mul_right _ _) _)
  have hpri‚ÇÅ : (P : ‚Ñï).Prime := hpri
  simpa [f1k‚ÇÇ] using dvd_coeff_cycl_integer hpri‚ÇÅ hŒ∂ (auxf1k‚ÇÇ hpri a) key ‚ü®0, hpri.pos‚ü©

end OnekTwo

section KoneKtwo

theorem auxk‚ÇÅk‚ÇÇ {k‚ÇÅ k‚ÇÇ : Fin p} (hpri : p.Prime) (hcong : k‚ÇÇ ‚â° k‚ÇÅ - 1 [ZMOD p]) :
    (k‚ÇÅ : ‚Ñï) ‚â† (k‚ÇÇ : ‚Ñï) := by
  haveI := (‚ü®hpri‚ü© : Fact p.Prime)
  intro habs
  rw [habs, ‚Üê ZMod.int_cast_eq_int_cast_iff, Int.cast_sub, ‚Üê sub_eq_zero] at hcong
  simp at hcong

end KoneKtwo

end CaseI

end FltRegular
