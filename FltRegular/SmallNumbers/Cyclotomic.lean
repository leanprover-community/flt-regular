import FltRegular.SmallNumbers.PID
import Mathlib.NumberTheory.NumberField.Cyclotomic.Basic
import Mathlib.NumberTheory.NumberField.Ideal.KummerDedekind
import Mathlib.RingTheory.Polynomial.Cyclotomic.Factorization

lemma uff {n p : ‚Ñï} [hp : Fact p.Prime] (hn : n.Prime) (hpn : p ‚â† n) : p.Coprime n :=
  hp.1.coprime_iff_not_dvd.mpr (fun h ‚Ü¶ hpn <|
    Nat.prime_eq_prime_of_dvd_pow hp.1 hn (m := 1) (by simpa))

open NumberField Module NumberField.InfinitePlace Nat Real RingOfIntegers Finset Multiset
  IsCyclotomicExtension.Rat Polynomial cyclotomic UniqueFactorizationMonoid Ideal

variable {n : ‚Ñï} [NeZero n] {K : Type*} [Field K] [NumberField K] [IsCyclotomicExtension {n} ‚Ñö K]

local notation "M " K:70 => (4 / œÄ) ^ nrComplexPlaces K *
  ((finrank ‚Ñö K)! / (finrank ‚Ñö K) ^ (finrank ‚Ñö K) * ‚àö|discr K|)

namespace IsCyclotomicExtension.Rat

local notation3 "Œ∏" => (zeta_spec n ‚Ñö K).toInteger

variable (n K) in
lemma minpoly : minpoly ‚Ñ§ Œ∏ = cyclotomic n ‚Ñ§ := by
  have := cyclotomic_eq_minpoly (zeta_spec n ‚Ñö K) (NeZero.pos n)
  rw [‚Üê (zeta_spec n ‚Ñö K).coe_toInteger] at this
  simpa [this] using (minpoly.algebraMap_eq RingOfIntegers.coe_injective Œ∏).symm

variable [hn : Fact (Nat.Prime n)]

variable (n) in
lemma exponent : exponent Œ∏ = 1 := by
  simp [exponent_eq_one_iff, ‚Üê ((zeta_spec n ‚Ñö K).integralPowerBasis').adjoin_gen_eq_top]

lemma ne_dvd_exponent (p : ‚Ñï) [hp : Fact p.Prime] : ¬¨ (p ‚à£ RingOfIntegers.exponent Œ∏) := by
  rw [exponent, dvd_one]
  exact hp.1.ne_one

variable (n)

theorem pid1 (h : ‚àÄ p ‚àà Finset.Icc 1 ‚åä(M K)‚åã‚Çä, (hp : p.Prime) ‚Üí p ‚â† n ‚Üí
    haveI : Fact (p.Prime) := ‚ü®hp‚ü©
      ‚àÉ P, ‚àÉ hP : P ‚àà monicFactorsMod Œ∏ p, ‚åä(M K)‚åã‚Çä < p ^ P.natDegree ‚à®
        Submodule.IsPrincipal ((primesOverSpanEquivMonicFactorsMod (ne_dvd_exponent p)).symm
          ‚ü®P, hP‚ü©).1) : IsPrincipalIdealRing (ùìû K) := by
  have : IsGalois ‚Ñö K := isGalois {n} ‚Ñö K
  refine PIDGalois (exponent n) (fun p hple hp ‚Ü¶ ?_)
  have : Fact (p.Prime) := ‚ü®hp‚ü©
  by_cases hpn : p = n
  ¬∑ let Q : ‚Ñ§[X] := X - 1
    have hQ : Q.map (Int.castRingHom (ZMod p)) ‚àà monicFactorsMod Œ∏ p := by
      simp only [Polynomial.map_sub, map_X, Polynomial.map_one, mem_toFinset, Q]
      refine (Polynomial.mem_normalizedFactors_iff ((Monic.map _ <|
        minpoly n K ‚ñ∏ monic ‚Üën ‚Ñ§).ne_zero)).mpr ‚ü®irreducible_of_degree_eq_one (by compute_degree!),
        by monicity, ‚ü®(X - 1) ^ (p - 2), ?_‚ü©‚ü©
      simp only [minpoly n K, map_cyclotomic]
      rw [‚Üê mul_one n, ‚Üêpow_one (n : ‚Ñï), ‚Üê hpn, cyclotomic_mul_prime_pow_eq (ZMod p) hp.not_dvd_one
        one_pos]
      simp only [cyclotomic_one, pow_one, tsub_self, pow_zero]
      rw [‚Üê pow_succ' (X - 1)]
      congr
      have := hp.two_le
      omega
    refine ‚ü®Q.map (Int.castRingHom (ZMod p)), hQ, ?_‚ü©
    right
    rw [primesOverSpanEquivMonicFactorsMod_symm_apply_eq_span (ne_dvd_exponent p) hQ]
    simp only [map_sub, aeval_X, map_one, Q]
    refine ‚ü®Œ∏ - 1, le_antisymm (span_le.mpr <| fun x hx ‚Ü¶ ?_) (span_le.mpr ?_)‚ü©
    ¬∑ rcases hx with rfl | rfl
      ¬∑ subst hpn
        simp [mem_span_singleton, (zeta_spec _ ‚Ñö K).toInteger_sub_one_dvd_prime']
      ¬∑ exact subset_span (by simp)
    ¬∑ simp only [Set.singleton_subset_iff, SetLike.mem_coe]
      exact subset_span (by simp)
  ¬∑ exact h p hple hp hpn

theorem pid2 (h : ‚àÄ p ‚àà Finset.Icc 1 ‚åä(M K)‚åã‚Çä, (hp : p.Prime) ‚Üí p ‚â† n ‚Üí
    haveI : Fact (p.Prime) := ‚ü®hp‚ü©
      ‚àÉ P : ‚Ñ§[X], P.Monic ‚àß P.map (Int.castRingHom (ZMod p)) ‚àà monicFactorsMod Œ∏ p ‚àß
        (‚åä(M K)‚åã‚Çä < p ^ P.natDegree ‚à®
          Submodule.IsPrincipal (span {‚Üëp, aeval Œ∏ P}))) : IsPrincipalIdealRing (ùìû K) := by
    refine pid1 n (fun p hple hp hpn ‚Ü¶ ?_)
    have : Fact (p.Prime) := ‚ü®hp‚ü©
    obtain ‚ü®P, hPmo, hP, hM‚ü© := h p hple hp hpn
    refine ‚ü®P.map (Int.castRingHom (ZMod p)), hP, ?_‚ü©
    rcases hM with H | H
    ¬∑ left
      convert H
      simp [hPmo.leadingCoeff]
    ¬∑ right
      simpa [primesOverSpanEquivMonicFactorsMod_symm_apply_eq_span (ne_dvd_exponent p) hP]

theorem pid3 (h : ‚àÄ p ‚àà Finset.Icc 1 ‚åä(M K)‚åã‚Çä, (hp : p.Prime) ‚Üí (hpn : p ‚â† n) ‚Üí
    haveI : Fact (p.Prime) := ‚ü®hp‚ü©
      ‚àÉ P Q A : ‚Ñ§[X], P.Monic ‚àß orderOf (ZMod.unitOfCoprime _ (uff hn.1 hpn)) = P.natDegree
      ‚àß P * Q + p * A = cyclotomic n ‚Ñ§ ‚àß
        (‚åä(M K)‚åã‚Çä < p ^ P.natDegree ‚à®
          Submodule.IsPrincipal (span {‚Üëp, aeval Œ∏ P}))) : IsPrincipalIdealRing (ùìû K) := by
  refine pid2 n (fun p hple hp hpn ‚Ü¶ ?_)
  have : Fact (p.Prime) := ‚ü®hp‚ü©
  obtain ‚ü®P, Q, A, hPmo, hP, hQA, hM‚ü© := h p hple hp hpn
  have : P.map (Int.castRingHom (ZMod p)) ‚à£ cyclotomic n (ZMod p) := by
    refine ‚ü®Q.map (Int.castRingHom (ZMod p)), ?_‚ü©
    simp [‚Üê map_cyclotomic n (Int.castRingHom (ZMod p)), ‚Üê hQA]
  refine ‚ü®P, hPmo, mem_toFinset.mpr <| (Polynomial.mem_normalizedFactors_iff
    (((minpoly.monic (isIntegral Œ∏)).map _).ne_zero)).mpr ‚ü®?_, hPmo.map _,
    by simp [minpoly, ‚Üê hQA]‚ü©, hM‚ü©
  refine ZMod.irreducible_of_dvd_cyclotomic_of_natDegree (fun h ‚Ü¶ ?_) this (by simp [‚Üê hP, hPmo])
  exact hp.ne_one <| ((Nat.dvd_prime hn.1).1 h).resolve_right hpn

theorem pid4 (h : ‚àÄ p ‚àà Finset.Icc 1 ‚åä(M K)‚åã‚Çä, (hp : p.Prime) ‚Üí (hpn : p ‚â† n) ‚Üí
    haveI : Fact (p.Prime) := ‚ü®hp‚ü©
      ‚àÉ P Q A G Qp Rp QP RP C1 C2 : ‚Ñ§[X],
        P.Monic ‚àß orderOf (ZMod.unitOfCoprime _ (uff hn.1 hpn)) = P.natDegree
          ‚àß P * Q + p * A = cyclotomic n ‚Ñ§ ‚àß
            (‚åä(M K)‚åã‚Çä < p ^ P.natDegree ‚à®
              (p = G * Qp + Rp * (cyclotomic n ‚Ñ§) ‚àß P = G * QP + RP * (cyclotomic n ‚Ñ§) ‚àß
               G = C1 * P + C2 * p ))) : IsPrincipalIdealRing (ùìû K) := by
  refine pid3 n (fun p hple hp hpn ‚Ü¶ ?_)
  obtain ‚ü®P, Q, A, G, Qp, Rp, QP, RP, C1, C2, hPmo, hP, hQA, hM‚ü© := h p hple hp hpn
  refine ‚ü®P, Q, A, hPmo, hP, hQA, ?_‚ü©
  rcases hM with H | ‚ü®Hp, HP, HG‚ü©
  ¬∑ left
    assumption
  ¬∑ right
    refine ‚ü®aeval Œ∏ G, le_antisymm (span_le.mpr <| fun x hx ‚Ü¶ ?_) (span_le.mpr ?_)‚ü©
    ¬∑ rcases hx with rfl | rfl
      ¬∑ simp only [submodule_span_eq, SetLike.mem_coe, mem_span_singleton]
        refine ‚ü®aeval Œ∏ Qp, ?_‚ü©
        rw [‚Üê aeval_mul, ‚Üê sub_eq_iff_eq_add.mpr Hp]
        simp [‚Üê minpoly n K]
      ¬∑ simp only [submodule_span_eq, SetLike.mem_coe, mem_span_singleton]
        refine ‚ü®aeval Œ∏ QP, ?_‚ü©
        rw [‚Üê aeval_mul, ‚Üê sub_eq_iff_eq_add.mpr HP]
        simp [‚Üê minpoly n K]
    ¬∑ simp only [Set.singleton_subset_iff, SetLike.mem_coe, HG, _root_.map_add, map_mul,
        map_natCast]
      exact add_mem (mul_mem_left _ _ (subset_span (by simp)))
        (mul_mem_left _ _ (subset_span (by simp)))

variable {n} in
theorem isMaximal {p : ‚Ñï} [hp : Fact (p.Prime)] (hpn : p ‚â† n) (P Q A : ‚Ñ§[X]) (hPmo : P.Monic)
    (hdeg : orderOf (ZMod.unitOfCoprime p (uff hn.1 hpn)) = P.natDegree)
    (hQA : P * Q + ‚Üëp * A = cyclotomic n ‚Ñ§) :
    (span {‚Üëp, (aeval Œ∏) P}).IsMaximal := by
  have hdvd : P.map (Int.castRingHom (ZMod p)) ‚à£ cyclotomic n (ZMod p) := by
    refine ‚ü®Q.map (Int.castRingHom (ZMod p)), ?_‚ü©
    simp [‚Üê map_cyclotomic _ (Int.castRingHom (ZMod p)), ‚Üê hQA]
  have hP : P.map (Int.castRingHom (ZMod p)) ‚àà monicFactorsMod Œ∏ p := by
    simp only [mem_toFinset, minpoly, map_cyclotomic,
      Polynomial.mem_normalizedFactors_iff (cyclotomic_ne_zero _ _)]
    refine ‚ü®?_, ?_, hdvd‚ü©
    ¬∑ replace hdeg : (P.map (Int.castRingHom (ZMod p))).natDegree =
        orderOf (ZMod.unitOfCoprime p (uff hn.1 hpn)) := by
          rw [hPmo.natDegree_map, hdeg]
      refine ZMod.irreducible_of_dvd_cyclotomic_of_natDegree (fun h ‚Ü¶ ?_) hdvd hdeg
      exact hp.1.ne_one <| ((Nat.dvd_prime hn.1).1 h).resolve_right hpn
    ¬∑ exact hPmo.map (Int.castRingHom (ZMod p))
  refine Ideal.IsPrime.isMaximal ?_ (fun h ‚Ü¶ hp.1.ne_zero ?_)
  ¬∑ rw [‚Üê primesOverSpanEquivMonicFactorsMod_symm_apply_eq_span (ne_dvd_exponent p) hP]
    apply Ideal.primesOver.isPrime
  ¬∑ apply CharZero.cast_injective (R := ùìû K)
    rw [cast_zero, ‚Üê Ideal.mem_bot, ‚Üê h]
    exact subset_span (by simp)

theorem pid5 (h : ‚àÄ p ‚àà Finset.Icc 1 ‚åä(M K)‚åã‚Çä, (hp : p.Prime) ‚Üí (hpn : p ‚â† n) ‚Üí
    haveI : Fact (p.Prime) := ‚ü®hp‚ü©
    ‚åä(M K)‚åã‚Çä < p ^ orderOf (ZMod.unitOfCoprime _ (uff hn.1 hpn)) ‚à®
    ‚àÉ P Q A G Qp Rp QP RP C1 C2 : ‚Ñ§[X],
      P.Monic ‚àß orderOf (ZMod.unitOfCoprime _ (uff hn.1 hpn)) = P.natDegree
        ‚àß P * Q + p * A = cyclotomic n ‚Ñ§ ‚àß (p = G * Qp + Rp * (cyclotomic n ‚Ñ§) ‚àß
          P = G * QP + RP * (cyclotomic n ‚Ñ§) ‚àß G = C1 * P + C2 * p)) :
    IsPrincipalIdealRing (ùìû K) := by
  refine pid4 n (fun p hple hp hpn ‚Ü¶ ?_)
  have : Fact (p.Prime) := ‚ü®hp‚ü©
  rcases h p hple hp hpn with H | H
  ¬∑ obtain ‚ü®P', hP'‚ü© := exists_mem_normalizedFactors (cyclotomic_ne_zero n (ZMod p))
      (not_isUnit_of_degree_pos _ <| degree_cyclotomic_pos _ _ (NeZero.pos n))
    obtain ‚ü®hP'irr, hP'mo, Q', hQ'‚ü© :=
      (Polynomial.mem_normalizedFactors_iff (cyclotomic_ne_zero n (ZMod p))).mp hP'
    obtain ‚ü®P, hP, hPdeg, hPmo‚ü© := lifts_and_degree_eq_and_monic ((mem_lifts P').mpr
      (map_surjective _ (ZMod.ringHom_surjective (Int.castRingHom (ZMod p))) _)) hP'mo
    obtain ‚ü®Q, hQ‚ü© := ((mem_lifts Q').mp (map_surjective _
      (ZMod.ringHom_surjective (Int.castRingHom (ZMod p))) _))
    set A' := cyclotomic n ‚Ñ§ - P * Q with hA'def
    obtain ‚ü®A, hA‚ü© : ‚Üëp ‚à£ A' := by
      rw [‚Üê C_eq_natCast, C_dvd_iff_dvd_coeff]
      intro i
      rw [‚Üê ZMod.intCast_zmod_eq_zero_iff_dvd, hA'def, coeff_sub, Int.cast_sub,
        ‚Üê eq_intCast (Int.castRingHom _), ‚Üê eq_intCast (Int.castRingHom _), ‚Üê coeff_map,
        ‚Üê coeff_map, ‚Üê coeff_sub, Polynomial.map_mul, map_cyclotomic, hP, hQ, hQ']
      simp
    have H : orderOf (ZMod.unitOfCoprime p (uff hn.1 hpn)) = P.natDegree := by
      rw [natDegree_eq_of_degree_eq hPdeg]
      convert (natDegree_of_dvd_cyclotomic_of_irreducible (f := 1) (p := p) (by simp)
        (by simpa using uff hn.1 hpn) ‚ü®Q', hQ'‚ü© hP'irr).symm
      simp
    refine ‚ü®P, Q, A, 0, 0, 0, 0, 0, 0, 0, hPmo, H, by simp [‚Üê hA, A'], ?_‚ü©
    ¬∑ left
      rwa [‚Üê H]
  ¬∑ obtain ‚ü®P, Q, A, G, Qp, Rp, QP, RP, C1, C2, hPmo, hP, hQA, hG, H1, H2‚ü© := H
    exact ‚ü®P, Q, A, G, Qp, Rp, QP, RP, C1, C2, hPmo, hP, hQA, Or.inr ‚ü®hG, H1, H2‚ü©‚ü©

open nonZeroDivisors in
theorem pid6 (h : ‚àÄ p ‚àà Finset.Icc 1 ‚åä(M K)‚åã‚Çä, (hp : p.Prime) ‚Üí (hpn : p ‚â† n) ‚Üí
    haveI : Fact (p.Prime) := ‚ü®hp‚ü©
    Nat.log p ‚åä(M K)‚åã‚Çä < orderOf (ZMod.unitOfCoprime _ (uff hn.1 hpn)) ‚à®
    ‚àÉ P Q A G Qp Rp QP RP C1 C2 : ‚Ñ§[X],
      P.Monic ‚àß orderOf (ZMod.unitOfCoprime _ (uff hn.1 hpn)) = P.natDegree
        ‚àß P * Q + p * A = cyclotomic n ‚Ñ§ ‚àß (p = G * Qp + Rp * (cyclotomic n ‚Ñ§) ‚àß
          P = G * QP + RP * (cyclotomic n ‚Ñ§) ‚àß G = C1 * P + C2 * p)) :
    IsPrincipalIdealRing (ùìû K) := by
  refine pid5 n (fun p hple hp hpn ‚Ü¶ ?_)
  rcases h p hple hp hpn with H | H
  ¬∑ left
    refine (Nat.log_lt_iff_lt_pow hp.one_lt ?_).mp H
    simp only [ne_eq, floor_eq_zero, not_lt]
    obtain ‚ü®I, -, hI‚ü© := exists_ideal_in_class_of_norm_le (1 : ClassGroup (ùìû K))
    exact le_trans (one_le_cast.mpr (Nat.one_le_iff_ne_zero.mpr
      (absNorm_ne_zero_iff_mem_nonZeroDivisors.mpr I.2))) hI
  ¬∑ right
    exact H

end IsCyclotomicExtension.Rat
