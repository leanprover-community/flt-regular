import Mathlib.NumberTheory.Cyclotomic.Gal
import Mathlib.NumberTheory.Cyclotomic.Rat
import Mathlib.RingTheory.Ideal.Norm

variable {K : Type _} [Field K] {Œ∂ : K}

open scoped NumberField

instance : Module (ùìû K) (ùìû K) := Semiring.toModule

open scoped NumberField

open Polynomial Algebra

namespace IsCyclotomicExtension.Rat

variable {p : ‚Ñï+} {k : ‚Ñï} [hp : Fact (p : ‚Ñï).Prime] [CharZero K]

local macro_rules | `($x ^ $y)   => `(HPow.hPow $x $y) -- Porting note: See issue #2220

theorem zeta_sub_one_prime [IsCyclotomicExtension {p ^ (k + 1)} ‚Ñö K]
    (hŒ∂ : IsPrimitiveRoot Œ∂ ‚Üë(p ^ (k + 1))) (hodd : p ‚â† 2) :
    Prime (‚ü®Œ∂ - 1, Subalgebra.sub_mem _ (hŒ∂.isIntegral (p ^ _).pos)
    (Subalgebra.one_mem _)‚ü© : ùìû K) := by
  letI := IsCyclotomicExtension.numberField {p ^ (k + 1)} ‚Ñö K
  refine Ideal.prime_of_irreducible_absNorm_span (fun h ‚Ü¶ ?_) ?_
  ¬∑ rw [‚Üê Subalgebra.coe_eq_zero, sub_eq_zero] at h
    exact hŒ∂.pow_ne_one_of_pos_of_lt zero_lt_one (one_lt_pow hp.out.one_lt (by simp)) (by simp [h])
  rw [Nat.irreducible_iff_prime, Ideal.absNorm_span_singleton, ‚Üê Nat.prime_iff,
    ‚Üê Int.prime_iff_natAbs_prime]
  convert Nat.prime_iff_prime_int.1 hp.out
  apply RingHom.injective_int (algebraMap ‚Ñ§ ‚Ñö)
  rw [‚Üê Algebra.norm_localization (S‚Çò := K) ‚Ñ§ (nonZeroDivisors ‚Ñ§), Subalgebra.algebraMap_eq]
  simp only [PNat.pow_coe, id.map_eq_id, RingHomCompTriple.comp_eq, RingHom.coe_coe,
    Subalgebra.coe_val, algebraMap_int_eq, map_natCast]
  refine hŒ∂.sub_one_norm_prime_ne_two (Polynomial.cyclotomic.irreducible_rat ?_) hodd
  simp

theorem zeta_sub_one_prime' [h : IsCyclotomicExtension {p} ‚Ñö K] (hŒ∂ : IsPrimitiveRoot Œ∂ p)
    (hodd : p ‚â† 2) :
    Prime (‚ü®Œ∂ - 1, Subalgebra.sub_mem _ (hŒ∂.isIntegral p.pos) (Subalgebra.one_mem _)‚ü© : ùìû K) := by
  convert @zeta_sub_one_prime K _ _ p 0 _ _ (by convert h; rw [zero_add, pow_one]) _ hodd
  simpa

end IsCyclotomicExtension.Rat
