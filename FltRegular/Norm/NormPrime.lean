import Mathlib.LinearAlgebra.SModEq
import Mathlib.NumberTheory.NumberField.Norm

open scoped NumberField

open RingOfIntegers Ideal Finset Nat FiniteDimensional

variable {K : Type _} [Field K] (pb : PowerBasis ‚Ñ§ (ùìû K))

local notation "R" => ùìû K

theorem exists_int_sModEq (x : R) : ‚àÉ n : ‚Ñ§, SModEq (span ({pb.gen} : Set R)) x n :=
  by
  refine' ‚ü®(pb.basis.repr x) ‚ü®0, pb.dim_pos‚ü©, _‚ü©
  have H := Basis.sum_repr pb.basis x
  rw [PowerBasis.coe_basis, ‚Üê
    insert_erase (mem_univ ‚ü®0, pb.dim_pos‚ü© : (‚ü®0, pb.dim_pos‚ü© : Fin pb.dim) ‚àà univ), sum_insert] at
    H 
  ¬∑ have :
      ‚àÄ i : (univ : Finset (Fin pb.dim)).erase‚Çì ‚ü®0, pb.dim_pos‚ü©,
        ‚Üë((pb.basis.repr x) i) * pb.gen ^ ((i : Fin pb.dim) : ‚Ñï) =
          ‚Üë((pb.basis.repr x) i) * pb.gen ^ (i : ‚Ñï).pred.succ :=
      by
      rintro ‚ü®i, hi‚ü©
      congr 1
      rw [succ_pred_eq_of_pos]
      rw [coe_coe, Subtype.coe_mk]
      refine' Nat.pos_of_ne_zero fun h => _
      cases' i with i‚ÇÅ hi‚ÇÅ
      simp only [coe_coe, Subtype.coe_mk] at h 
      simpa [h] using hi
    simp only [Fin.val_mk, pow_zero, Int.smul_one_eq_coe, zsmul_eq_mul] at H 
    rw [‚Üê Finset.sum_finset_coe] at H 
    conv_lhs at H =>
      congr
      skip
      congr
      skip
      ext
      rw [this i, pow_succ, ‚Üê mul_assoc, mul_comm _ pb.gen, mul_assoc]
    rw [‚Üê mul_sum] at H 
    nth_rw 1 [‚Üê H]
    rw [mul_one, SModEq.def, quotient.mk_eq_mk, map_add, _root_.map_mul, ‚Üê submodule_span_eq,
      quotient.eq_zero_iff_mem.2 (Submodule.mem_span_singleton_self pb.gen), MulZeroClass.zero_mul,
      add_zero, quotient.mk_eq_mk]
  ¬∑ exact not_mem_erase ‚ü®0, pb.dim_pos‚ü© univ

variable [NumberField K] {pb}

variable (hpr : Prime (norm ‚Ñö pb.gen))

theorem gen_ne_zero : pb.gen ‚â† 0 := by
  intro h
  simp only [norm, MonoidHom.restrict_apply, MonoidHom.codRestrict_apply,
    Algebra.norm_eq_zero_iff.2 (show (pb.gen : K) = 0 by exact_mod_cast h)] at hpr 
  simpa using Prime.ne_zero hpr

theorem quotient_not_trivial : Nontrivial (R ‚ß∏ span ({pb.gen} : Set R)) :=
  Quotient.nontrivial fun h => hpr.not_unit ((isUnit_norm ‚Ñö).2 (span_singleton_eq_top.1 h))

attribute [local instance] NumberField.ringOfIntegersAlgebra

theorem prime_of_norm_prime [IsGalois ‚Ñö K] : Prime pb.gen :=
  by
  rw [‚Üê span_singleton_prime (gen_ne_zero hpr), ‚Üê quotient.is_domain_iff_prime]
  haveI : Nontrivial (ùìû K ‚ß∏ span {pb.gen}) := ‚ü®(quotient_not_trivial hpr).exists_pair_ne‚ü©
  suffices NoZeroDivisors (ùìû K ‚ß∏ span {pb.gen}) by exact @NoZeroDivisors.to_isDomain _ _ _ this
  refine' ‚ü®_‚ü©
  rintro ‚ü®x, hx‚ü© ‚ü®y, hy‚ü© hxy
  by_contra' h
  have h‚ÇÅ := h.1; have h‚ÇÇ := h.2
  simp only [Submodule.Quotient.quot_mk_eq_mk, quotient.mk_eq_mk] at h‚ÇÅ h‚ÇÇ hxy 
  obtain ‚ü®n, hn‚ü© := exists_int_sModEq pb ‚ü®x, hx‚ü©
  obtain ‚ü®m, hm‚ü© := exists_int_sModEq pb ‚ü®y, hy‚ü©
  rw [SModEq.def, quotient.mk_eq_mk] at hn hm 
  rw [hn] at h‚ÇÅ hxy ; rw [hm] at h‚ÇÇ hxy 
  obtain ‚ü®z, hz‚ü© := mem_span_singleton.1 (quotient.eq_zero_iff_mem.1 hxy)
  replace hz := congr_arg (norm ‚Ñö) hz
  have hnm : (norm ‚Ñö) ((n : R) * (m : R)) = n ^ finrank ‚Ñö K * m ^ finrank ‚Ñö K :=
    by
    refine' Subtype.ext _
    simp only [norm, MonoidHom.restrict_apply, MulMemClass.coe_mul, SubringClass.coe_intCast,
      _root_.map_mul, MonoidHom.codRestrict_apply, SetLike.coe_mk, SubsemiringClass.coe_pow]
    rw [show (n : K) = algebraMap ‚Ñö K (n : ‚Ñö) by simp,
      show (m : K) = algebraMap ‚Ñö K (m : ‚Ñö) by simp, Algebra.norm_algebraMap,
      Algebra.norm_algebraMap]
  replace hz : norm ‚Ñö pb.gen ‚à£ n ^ finrank ‚Ñö K * m ^ finrank ‚Ñö K
  ¬∑ refine' ‚ü®norm ‚Ñö z, _‚ü©
    rwa [‚Üê hnm, ‚Üê _root_.map_mul]
  simp only [quotient.mk_eq_mk, map_intCast] at h‚ÇÅ h‚ÇÇ 
  cases' hpr.dvd_or_dvd hz with Hn Hm
  ¬∑
    simpa [h‚ÇÅ] using
      quotient.eq_zero_iff_mem.2
        (mem_span_singleton.2
          (dvd_trans (dvd_norm ‚Ñö pb.gen)
            (RingHom.map_dvd (algebraMap (ùìû ‚Ñö) R) (hpr.dvd_of_dvd_pow Hn))))
  ¬∑
    simpa [h‚ÇÇ] using
      quotient.eq_zero_iff_mem.2
        (mem_span_singleton.2
          (dvd_trans (dvd_norm ‚Ñö pb.gen)
            (RingHom.map_dvd (algebraMap (ùìû ‚Ñö) R) (hpr.dvd_of_dvd_pow Hm))))

