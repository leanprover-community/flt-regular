import FltRegular.NumberTheory.KummersLemma.Field
import FltRegular.NumberTheory.Hilbert94

open scoped NumberField

variable {K : Type*} {p : ‚Ñï+} [hpri : Fact p.Prime] [Field K] [NumberField K] [IsCyclotomicExtension {p} ‚Ñö K]
variable (hp : p ‚â† 2) [Fintype (ClassGroup (ùìû K))] (hreg : (p : ‚Ñï).Coprime <| Fintype.card <| ClassGroup (ùìû K))

variable {Œ∂ : K} (hŒ∂ : IsPrimitiveRoot Œ∂ p) (u : (ùìû K)À£)
  (hcong : (hŒ∂.unit' - 1 : ùìû K) ^ (p : ‚Ñï) ‚à£ (‚Üëu : ùìû K) - 1) (hu : ‚àÄ v : K, v ^ (p : ‚Ñï) ‚â† u)

-- attribute [-instance] instCoeOut

open Polynomial

variable {L} [Field L] [Algebra K L] [FiniteDimensional K L]
variable [IsSplittingField K L (X ^ (p : ‚Ñï) - C (u : K))]
variable (œÉ : L ‚âÉ‚Çê[K] L) (hœÉ : ‚àÄ x, x ‚àà Subgroup.zpowers œÉ)

theorem false_of_zeta_sub_one_pow_dvd_sub_one_of_pow_ne (u : (ùìû K)À£)
    (hcong : (hŒ∂.unit' - 1 : ùìû K) ^ (p : ‚Ñï) ‚à£ (‚Üëu : ùìû K) - 1)
    (hu : ‚àÄ v : K, v ^ (p : ‚Ñï) ‚â† u) : False := by
  letI := Fact.mk (X_pow_sub_C_irreducible_of_prime hpri.out hu)
  let L := AdjoinRoot (Polynomial.X ^ (p : ‚Ñï) - Polynomial.C (u : K))
  haveI := isSplittingField_AdjoinRoot_X_pow_sub_C ‚ü®Œ∂, (mem_primitiveRoots p.pos).mpr hŒ∂‚ü©
    (X_pow_sub_C_irreducible_of_prime hpri.out hu)
  haveI := isGalois_of_isSplittingField_X_pow_sub_C ‚ü®Œ∂, (mem_primitiveRoots p.pos).mpr hŒ∂‚ü©
    (X_pow_sub_C_irreducible_of_prime hpri.out hu) L
  have := Polynomial.IsSplittingField.finiteDimensional L
    (Polynomial.X ^ (p : ‚Ñï) - Polynomial.C (u : K))
  have := isCyclic_of_isSplittingField_X_pow_sub_C ‚ü®Œ∂, (mem_primitiveRoots p.pos).mpr hŒ∂‚ü©
      (X_pow_sub_C_irreducible_of_prime hpri.out hu) L
  have : CharZero L := charZero_of_injective_algebraMap (algebraMap K L).injective
  have : FiniteDimensional ‚Ñö L := Module.Finite.trans K L
  have : NumberField L := ‚ü®‚ü©
  have hKL : FiniteDimensional.finrank K L = p := (finrank_of_isSplittingField_X_pow_sub_C
    ‚ü®Œ∂, (mem_primitiveRoots p.pos).mpr hŒ∂‚ü© (X_pow_sub_C_irreducible_of_prime hpri.out hu) L)
  have := KummersLemma.isUnramified hp hŒ∂ u hcong hu L
  have := dvd_card_classGroup_of_isUnramified_isCyclic K L (hKL.symm ‚ñ∏ hpri.out)
    (hKL.symm ‚ñ∏ PNat.coe_injective.ne hp)
  rw [hKL, ‚Üê Int.ofNat_dvd, (Nat.prime_iff_prime_int.mp hpri.out).irreducible.dvd_iff_not_coprime,
    Nat.isCoprime_iff_coprime] at this
  exact this (by convert hreg)

-- Let ùëù be a regular prime (i.e. an odd prime which does not divide the class number off
-- the ùëù-th cyclotomic field) and ùúâ a primitive ùëù-th root of unity;
-- if a unit ùë¢‚ààùêê(ùúâ) is congruent to an integer modulo ùëù, then ùë¢ is a ùëù-th power in ùêê(ùúâ).
theorem eq_pow_prime_of_unit_of_congruent (u : (ùìû K)À£)
    (hcong : ‚àÉ n : ‚Ñ§, (p : ùìû K) ‚à£ (‚Üëu - n : ùìû K)) :
    ‚àÉ v, u = v ^ (p : ‚Ñï) := by
  haveI : Fact (Nat.Prime p) := hpri
  obtain ‚ü®Œ∂, hŒ∂‚ü© := IsCyclotomicExtension.exists_prim_root (S := {p}) ‚Ñö (B := K) (n := p) rfl
  obtain ‚ü®x, hx‚ü© : (p : ùìû K) ‚à£ (‚Üë(u ^ (p - 1 : ‚Ñï)) : ùìû K) - 1 := by
    obtain ‚ü®n, hn‚ü© := hcong
    have hn' : (p : ‚Ñ§) ‚à£ n ^ (p - 1 : ‚Ñï) - 1 := by
      refine Int.modEq_iff_dvd.mp (Int.ModEq.pow_card_sub_one_eq_one hpri.out (n := n) ?_).symm
      rw [isCoprime_comm, (Nat.prime_iff_prime_int.mp hpri.out).coprime_iff_not_dvd]
      intro h
      replace h := _root_.map_dvd (Int.castRingHom (ùìû K)) h
      simp only [map_natCast, eq_intCast, ‚Üê dvd_iff_dvd_of_dvd_sub hn] at h
      refine hŒ∂.zeta_sub_one_prime'.not_unit ((isUnit_pow_iff ?_).mp
        (isUnit_of_dvd_unit ((associated_zeta_sub_one_pow_prime hŒ∂).dvd.trans h) u.isUnit))
      simpa only [ge_iff_le, ne_eq, tsub_eq_zero_iff_le, not_le] using hpri.out.one_lt
    replace hn' := _root_.map_dvd (Int.castRingHom (ùìû K)) hn'
    simp only [map_natCast, eq_intCast, Int.cast_sub, Int.cast_pow, Int.cast_one] at hn'
    rw [‚Üê Ideal.mem_span_singleton, ‚Üê Ideal.Quotient.eq_zero_iff_mem,
      RingHom.map_sub, sub_eq_zero] at hn hn' ‚ä¢
    rw [Units.val_pow_eq_pow_val, RingHom.map_pow, hn, ‚Üê RingHom.map_pow, hn']
  have : (hŒ∂.unit' - 1 : ùìû K) ^ (p : ‚Ñï) ‚à£ (‚Üë(u ^ (p - 1 : ‚Ñï)) : ùìû K) - 1 := by
    rw [hx]
    rw [sub_eq_iff_eq_add, add_comm] at hx
    have H : Algebra.norm ‚Ñ§ (1 + (p : ‚Ñï) ‚Ä¢ x) = 1 := norm_add_one_smul_of_isUnit hpri.out
      (PNat.coe_injective.ne_iff.mpr hp) x (by rw [nsmul_eq_mul, ‚Üê hx]; exact Units.isUnit _)
    have := H ‚ñ∏ zeta_sub_one_pow_dvd_norm_sub_pow hŒ∂ x
    simpa [ge_iff_le, Int.cast_one, sub_self, nsmul_eq_mul, Nat.cast_mul, PNat.pos,
      Nat.cast_pred, zero_sub, IsUnit.mul_iff, ne_eq, tsub_eq_zero_iff_le, not_le, dvd_neg,
      Units.isUnit, and_true, zero_add] using this
  have : ¬¨(‚àÄ v : K, _) := false_of_zeta_sub_one_pow_dvd_sub_one_of_pow_ne hp hreg hŒ∂ _ this
  simp only [not_forall, not_not] at this
  obtain ‚ü®v, hv‚ü© := this
  have hv' : IsIntegral ‚Ñ§ v := by
    apply IsIntegral.of_pow p.pos; rw [hv]; exact NumberField.RingOfIntegers.isIntegral_coe _
  set w : ùìû K := ‚ü®v, hv'‚ü©
  have : IsUnit w := by
    rw [‚Üê isUnit_pow_iff p.pos.ne.symm]; convert (u ^ (p - 1 : ‚Ñï) : (ùìû K)À£).isUnit; ext; exact hv
  have hv'' : this.unit ^ (p : ‚Ñï) = u ^ (p - 1 : ‚Ñï) := by
    ext; simpa only [Units.val_pow_eq_pow_val, IsUnit.unit_spec, SubmonoidClass.coe_pow] using hv
  use u / this.unit
  rw [div_pow, hv'', div_eq_mul_inv, ‚Üê pow_sub _ tsub_le_self,
    tsub_tsub_cancel_of_le (Nat.Prime.one_lt hpri.out).le, pow_one]
