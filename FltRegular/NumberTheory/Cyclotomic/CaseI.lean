import FltRegular.NumberTheory.Cyclotomic.UnitLemmas
import FltRegular.NumberTheory.Cyclotomic.CyclRat
import Mathlib.NumberTheory.NumberField.CMField

open scoped NumberField nonZeroDivisors

variable {p : ‚Ñï} [NeZero p] {K : Type*} [Field K] [NumberField K] [IsCyclotomicExtension {p} ‚Ñö K]

variable {Œ∂ : K} (hŒ∂ : IsPrimitiveRoot Œ∂ p)

open FractionalIdeal NumberField IsCMField

variable (i : ‚Ñ§)

namespace FltRegular.CaseI

theorem pow_sub_intGalConj_mem (Œ± : ùìû K) [Fact (p.Prime)] (hp : 2 < p) :
    haveI := IsCyclotomicExtension.IsTotallyComplex K hp
    haveI := IsCyclotomicExtension.IsCMField K hp
    (Œ± ^ p - ringOfIntegersComplexConj K (Œ± ^ p)) ‚àà Ideal.span ({(p : ùìû K)} : Set (ùìû K)) := by
  obtain ‚ü®a, ha‚ü© := exists_int_sub_pow_prime_dvd p Œ±
  rw [Ideal.mem_span_singleton] at ha ‚ä¢
  obtain ‚ü®Œ≥, hŒ≥‚ü© := ha
  rw [sub_eq_iff_eq_add] at hŒ≥
  rw [hŒ≥, _root_.map_add, _root_.map_mul, map_natCast, map_intCast, add_sub_add_right_eq_sub,
    ‚Üê mul_sub]
  exact dvd_mul_right _ _

theorem exists_int_sum_eq_zero'_aux (x y i : ‚Ñ§) [Fact (p.Prime)] (hp : 2 < p) :
    haveI := IsCyclotomicExtension.IsTotallyComplex K hp
    haveI := IsCyclotomicExtension.IsCMField K hp
    ringOfIntegersComplexConj K (x + y * ‚Üë(hŒ∂.unit' ^ i) : ùìû K) =
      x + y * (hŒ∂.unit' ^ (-i) : (ùìû K)À£) := by
  haveI := IsCyclotomicExtension.IsTotallyComplex K hp
  haveI := IsCyclotomicExtension.IsCMField K hp
  ext1
  simp only [map_add, map_intCast, map_mul, coe_ringOfIntegersComplexConj, zpow_neg, map_units_inv,
    add_right_inj, mul_eq_mul_left_iff, Int.cast_eq_zero]
  simp_rw [NumberField.Units.coe_zpow]
  left
  simp only [map_zpow‚ÇÄ]
  rw [‚Üê inv_zpow]
  congr
  suffices hŒ∂.unit' ‚àà Units.torsion K by
    have H := RingOfIntegers.ext_iff.1 <|
        Units.ext_iff.1 <| unitsComplexConj_torsion K ‚ü®hŒ∂.unit', ‚Äπ_‚Ä∫‚ü©
    have : ‚Üë‚ÜëhŒ∂.unit' = Œ∂ := rfl
    simp only [Units.coe_mapEquiv, AlgEquiv.toRingEquiv_eq_coe, RingEquiv.coe_toMulEquiv,
      RingOfIntegers.mapRingEquiv_apply, this, AlgEquiv.coe_ringEquiv, InvMemClass.coe_inv,
      map_units_inv] at H
    have h : (algebraMap (ùìû K) K) ‚ÜëhŒ∂.unit' = Œ∂ := rfl
    simp [h, H]
  refine (CommGroup.mem_torsion _ _).2 (isOfFinOrder_iff_pow_eq_one.2 ‚ü®p, by cutsat, ?_‚ü©)
  ext
  exact hŒ∂.pow_eq_one

theorem exists_int_sum_eq_zero' (x y i : ‚Ñ§) {u : (ùìû K)À£} {Œ± : ùìû K}
    (h : (x : ùìû K) + y * (hŒ∂.unit' ^ i : (ùìû K)À£) = u * Œ± ^ p) [Fact (p.Prime)] (hp : 2 < p) :
      ‚àÉ k : ‚Ñï, (x : ùìû K) + y * (hŒ∂.unit' ^ i : (ùìû K)À£) - ((hŒ∂.unit' ^ k) ^ 2 : (ùìû K)À£) *
    (x + y * (hŒ∂.unit' ^ (-i) : (ùìû K)À£)) ‚àà
    Ideal.span ({(p : ùìû K)} : Set (ùìû K)) := by
  letI : NumberField K := IsCyclotomicExtension.numberField { p } ‚Ñö _
  obtain ‚ü®k, H‚ü© := unit_inv_conj_is_root_of_unity hŒ∂ u hp
  refine ‚ü®k, ?_‚ü©
  rw [‚Üê exists_int_sum_eq_zero'_aux _ _ _ _ hp, h, ‚Üê H, Units.val_mul, mul_assoc, ‚Üê mul_sub]
  convert Ideal.mul_mem_left _ ‚Üëu (pow_sub_intGalConj_mem Œ± hp) using 3
  ext
  simp

theorem exists_int_sum_eq_zero (x y i : ‚Ñ§) {u : (ùìû K)À£} {Œ± : ùìû K}
      (h : (x : ùìû K) + y * (hŒ∂.unit' ^ i : (ùìû K)À£) = u * Œ± ^ p) [Fact (p.Prime)] (hp : 2 < p) :
    ‚àÉ k : ‚Ñ§, (x : ùìû K) + y * (hŒ∂.unit' ^ i : (ùìû K)À£) - (hŒ∂.unit' ^ (2 * k) : (ùìû K)À£) *
    (x + y * (hŒ∂.unit' ^ (-i) : (ùìû K)À£)) ‚àà
    Ideal.span ({(p : ùìû K)} : Set (ùìû K)) := by
  obtain ‚ü®k, hk‚ü© := exists_int_sum_eq_zero' hŒ∂ x y i h hp
  use k
  convert hk
  rw [mul_comm, zpow_mul, zpow_ofNat, zpow_natCast]

end FltRegular.CaseI
