import Mathlib.FieldTheory.SplittingField.Construction
import Mathlib.NumberTheory.ClassNumber.Finite
import Mathlib.NumberTheory.ClassNumber.AdmissibleAbs
import FltRegular.NumberTheory.Cyclotomic.CyclRat
import Mathlib.NumberTheory.Cyclotomic.PID

/-!
# Regular primes

## Main definitions

* `IsRegularNumber`: a natural number `n` is regular if `n` is coprime with the cardinal of the
  class group.

-/

noncomputable section

open Nat Polynomial NumberField

open scoped NumberField

variable (n p : ‚Ñï) [hp : Fact p.Prime]

/-- A natural number `n` is regular if `n` is coprime with the cardinal of the class group -/
def IsRegularNumber [NeZero n] : Prop :=
  n.Coprime <| Fintype.card <| ClassGroup (ùìû <| CyclotomicField n ‚Ñö)

/-- The definition of regular primes. -/
def IsRegularPrime : Prop :=
  IsRegularNumber p

section TwoRegular

variable (A K : Type*) [CommRing A] [IsDomain A] [Field K] [Algebra A K] [IsFractionRing A K]

variable (L : Type*) [Field L] [Algebra K L]

/-- The second cyclotomic field is equivalent to the base field. -/
def cyclotomicFieldTwoEquiv [IsCyclotomicExtension {2} K L] : L ‚âÉ‚Çê[K] K := by
  suffices IsSplittingField K K (cyclotomic 2 K) by
    have : IsSplittingField K L (cyclotomic 2 K) :=
      IsCyclotomicExtension.splitting_field_cyclotomic 2 K L
    exact
      (IsSplittingField.algEquiv L (cyclotomic 2 K)).trans
        (IsSplittingField.algEquiv K <| cyclotomic 2 K).symm
  exact ‚ü®by simpa using @splits_X_sub_C _ _ _ _ (RingHom.id K) (-1),
    by simp [eq_iff_true_of_subsingleton]‚ü©

instance IsPrincipalIdealRing_of_IsCyclotomicExtension_two
  (L : Type _) [Field L] [CharZero L] [IsCyclotomicExtension {2} ‚Ñö L] :
    IsPrincipalIdealRing (ùìû L) := by
  haveI : IsIntegralClosure ‚Ñ§ ‚Ñ§ L :=
    { algebraMap_injective' := (algebraMap ‚Ñ§ L).injective_int
      isIntegral_iff := fun {x} => by
        let f := cyclotomicFieldTwoEquiv ‚Ñö L
        refine
          ‚ü®fun hx => ‚ü®IsIntegralClosure.mk' ‚Ñ§ (f x) (map_isIntegral_int f hx), f.injective ?_‚ü©, ?_‚ü©
        ¬∑ convert IsIntegralClosure.algebraMap_mk' ‚Ñ§ (f x) (map_isIntegral_int f hx)
          simp
        ¬∑ rintro ‚ü®y, hy‚ü©
          simpa [‚Üê hy] using isIntegral_algebraMap }
  let F : ùìû L ‚âÉ+* ‚Ñ§ := NumberField.RingOfIntegers.equiv _
  exact IsPrincipalIdealRing.of_surjective F.symm.toRingHom F.symm.surjective

instance : IsCyclotomicExtension {2} ‚Ñö (CyclotomicField 2 ‚Ñö) :=
CyclotomicField.isCyclotomicExtension 2 ‚Ñö

instance : IsPrincipalIdealRing (ùìû (CyclotomicField 2 ‚Ñö)) :=
IsPrincipalIdealRing_of_IsCyclotomicExtension_two _

theorem isRegularPrime_two : IsRegularPrime 2 := by
  rw [IsRegularPrime, IsRegularNumber]
  convert coprime_one_right _
  dsimp
  apply (card_classGroup_eq_one_iff (R := ùìû (CyclotomicField 2 ‚Ñö))).2
  infer_instance

theorem isRegularPrime_three :
    haveI : Fact (Nat.Prime 3) := ‚ü®Nat.prime_three‚ü©
    IsRegularPrime 3 := by
  rw [IsRegularPrime, IsRegularNumber]
  convert coprime_one_right _
  exact classNumber_eq_one_iff.2
    (IsCyclotomicExtension.Rat.three_pid (CyclotomicField _ ‚Ñö))

end TwoRegular

theorem isPrincipal_of_isPrincipal_pow_of_coprime
    {A : Type*} [CommRing A] [IsDedekindDomain A] [Fintype (ClassGroup A)]
    {p : ‚Ñï} [Fact p.Prime]
    (H : p.Coprime <| Fintype.card <| ClassGroup A) {I : Ideal A}
    (hI : (I ^ p).IsPrincipal) : I.IsPrincipal := by
  by_cases Izero : I = 0
  ¬∑ rw [Izero]
    exact bot_isPrincipal
  rw [‚Üê ClassGroup.mk0_eq_one_iff (mem_nonZeroDivisors_of_ne_zero _)] at hI ‚ä¢
  swap; exact Izero
  swap; exact pow_ne_zero p Izero
  rw [‚Üê orderOf_eq_one_iff, ‚Üê Nat.dvd_one, ‚Üê H, Nat.dvd_gcd_iff]
  refine ‚ü®?_, orderOf_dvd_card‚ü©
  rwa [orderOf_dvd_iff_pow_eq_one, ‚Üê map_pow, SubmonoidClass.mk_pow]
