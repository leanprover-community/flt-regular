import FltRegular.CaseII.InductionStep

open scoped BigOperators nonZeroDivisors NumberField
open Polynomial

variable {K : Type*} {p : ‚Ñï+} [hpri : Fact p.Prime] [Field K] [NumberField K] [IsCyclotomicExtension {p} ‚Ñö K]
variable (hp : p ‚â† 2) [Fintype (ClassGroup (ùìû K))] (hreg : (p : ‚Ñï).Coprime <| Fintype.card <| ClassGroup (ùìû K))

variable {Œ∂ : K} (hŒ∂ : IsPrimitiveRoot Œ∂ p)

namespace FltRegular

/-- Statement of case II. -/
def CaseII.Statement : Prop :=
  ‚àÄ ‚¶Éa b c : ‚Ñ§‚¶Ñ ‚¶Ép : ‚Ñï‚¶Ñ [hp : Fact p.Prime] (_ : @IsRegularPrime p hp) (_ : p ‚â† 2)
    (_ : a * b * c ‚â† 0) (_ : ‚Üëp ‚à£ a * b * c), a ^ p + b ^ p ‚â† c ^ p

lemma not_exists_solution (hm : 1 ‚â§ m) :
  ¬¨‚àÉ (x' y' z' : ùìû K) (Œµ‚ÇÉ : (ùìû K)À£),
    ¬¨((hŒ∂.unit' : ùìû K) - 1 ‚à£ y') ‚àß ¬¨((hŒ∂.unit' : ùìû K) - 1 ‚à£ z') ‚àß
    x' ^ (p : ‚Ñï) + y' ^ (p : ‚Ñï) = Œµ‚ÇÉ * (((hŒ∂.unit' : ùìû K) - 1) ^ m * z') ^ (p : ‚Ñï) := by
  induction' m, hm using Nat.le_induction with m' _ IH
  ¬∑ rintro ‚ü®x, y, z, Œµ‚ÇÉ, hy, hz, e‚ü©
    exact zero_lt_one.not_le (one_le_m hp hŒ∂ e hy hz)
  ¬∑ rintro ‚ü®x, y, z, Œµ‚ÇÉ, hy, hz, e‚ü©
    exact IH (exists_solution' hp hreg hŒ∂ e hy hz)

lemma not_exists_solution' :
  ¬¨‚àÉ (x y z : ùìû K), ¬¨(hŒ∂.unit' : ùìû K) - 1 ‚à£ y ‚àß (hŒ∂.unit' : ùìû K) - 1 ‚à£ z ‚àß z ‚â† 0 ‚àß
    x ^ (p : ‚Ñï) + y ^ (p : ‚Ñï) = z ^ (p : ‚Ñï) := by
  letI : Fact (Nat.Prime p) := hpri
  letI : WfDvdMonoid (ùìû K) := IsNoetherianRing.wfDvdMonoid
  rintro ‚ü®x, y, z, hy, hz, hz', e‚ü©
  obtain ‚ü®m, z, hm, hz'', rfl‚ü© :
    ‚àÉ m z', 1 ‚â§ m ‚àß ¬¨((hŒ∂.unit' : ùìû K) - 1 ‚à£ z') ‚àß z = ((hŒ∂.unit' : ùìû K) - 1) ^ m * z' := by
    classical
    have H : multiplicity.Finite ((hŒ∂.unit' : ùìû K) - 1) z := WfDvdMonoid.multiplicity_finite
      (M := ùìû K) hŒ∂.zeta_sub_one_prime'.not_unit hz'
    obtain ‚ü®z', h‚ü© := multiplicity.pow_multiplicity_dvd H
    refine ‚ü®_, _, ?_, ?_, h‚ü©
    ¬∑ rwa [‚Üê PartENat.coe_le_coe, PartENat.natCast_get, ‚Üê multiplicity.pow_dvd_iff_le_multiplicity,
        pow_one]
    ¬∑ intro h'
      have := mul_dvd_mul_left (((hŒ∂.unit' : ùìû K) - 1) ^ Part.get (multiplicity _ z) H) h'
      rw [‚Üê pow_succ', ‚Üê h] at this
      exact multiplicity.is_greatest' H (Nat.lt_succ_self _) this
  refine not_exists_solution hp hreg hŒ∂ hm ‚ü®x, y, z, 1, hy, hz'', ?_‚ü©
  rwa [Units.val_one, one_mul]

lemma not_exists_Int_solution {p : ‚Ñï} [hpri : Fact (Nat.Prime p)] (hreg : IsRegularPrime p) (hodd : p ‚â† 2) :
  ¬¨‚àÉ (x y z : ‚Ñ§), ¬¨‚Üëp ‚à£ y ‚àß ‚Üëp ‚à£ z ‚àß z ‚â† 0 ‚àß x ^ p + y ^ p = z ^ p := by
  haveI : Fact (PNat.Prime ‚ü®p, hpri.out.pos‚ü©) := hpri
  haveI := CyclotomicField.isCyclotomicExtension ‚ü®p, hpri.out.pos‚ü© ‚Ñö
  obtain ‚ü®Œ∂, hŒ∂‚ü© := IsCyclotomicExtension.exists_prim_root
    ‚Ñö (B := (CyclotomicField ‚ü®p, hpri.out.pos‚ü© ‚Ñö)) (Set.mem_singleton (‚ü®p, hpri.out.pos‚ü© : ‚Ñï+))
  have hodd' : (‚ü®p, hpri.out.pos‚ü© : ‚Ñï+) ‚â† (2 : ‚Ñï+) := by
    rwa [‚Üê PNat.coe_injective.ne_iff]
  have := fun n ‚Ü¶ zeta_sub_one_dvd_Int_iff (K := CyclotomicField ‚ü®p, hpri.out.pos‚ü© ‚Ñö) hŒ∂ (n := n)
  simp only [PNat.mk_coe] at this
  simp_rw [‚Üê this]
  rintro ‚ü®x, y, z, hy, hz, hz', e‚ü©
  refine not_exists_solution' (K := CyclotomicField ‚ü®p, hpri.out.pos‚ü© ‚Ñö) hodd' ?_
    hŒ∂ ‚ü®x, y, z, hy, hz, ?_, ?_‚ü©
  ¬∑ convert hreg
  ¬∑ rwa [ne_eq, Int.cast_eq_zero]
  ¬∑ dsimp
    simp_rw [‚Üê Int.cast_pow, ‚Üê Int.cast_add, e]

lemma not_exists_Int_solution' {p : ‚Ñï} [hpri : Fact (Nat.Prime p)] (hreg : IsRegularPrime p) (hodd : p ‚â† 2) :
  ¬¨‚àÉ (x y z : ‚Ñ§), ({x, y, z} : Finset ‚Ñ§).gcd id = 1 ‚àß ‚Üëp ‚à£ z ‚àß z ‚â† 0 ‚àß x ^ p + y ^ p = z ^ p := by
  rintro ‚ü®x, y, z, hgcd, hz, hz', e‚ü©
  refine not_exists_Int_solution hreg hodd ‚ü®x, y, z, ?_, hz, hz', e‚ü©
  intro hy
  have := dvd_sub (dvd_pow hz hpri.out.ne_zero) (dvd_pow hy hpri.out.ne_zero)
  rw [‚Üê e, add_sub_cancel] at this
  replace this := (Nat.prime_iff_prime_int.mp hpri.out).dvd_of_dvd_pow this
  apply (Nat.prime_iff_prime_int.mp hpri.out).not_unit
  rw [isUnit_iff_dvd_one, ‚Üê hgcd]
  simp [dvd_gcd_iff, hz, hy, this]

lemma Int.gcd_left_comm (a b c : ‚Ñ§) : Int.gcd a (Int.gcd b c) = Int.gcd b (Int.gcd a c) := by
  rw [‚Üê Int.gcd_assoc, ‚Üê Int.gcd_assoc, Int.gcd_comm a b]

/-- CaseII. -/
theorem caseII {a b c : ‚Ñ§} {p : ‚Ñï} [hpri : Fact p.Prime] (hreg : IsRegularPrime p) (hodd : p ‚â† 2)
    (hprod : a * b * c ‚â† 0) (hgcd : ({a, b, c} : Finset ‚Ñ§).gcd id = 1)
    (caseII : ‚Üëp ‚à£ a * b * c) : a ^ p + b ^ p ‚â† c ^ p := by
  intro e
  simp only [ne_eq, mul_eq_zero, not_or] at hprod
  obtain ‚ü®‚ü®a0, b0‚ü©, c0‚ü© := hprod
  have hodd' := Nat.Prime.odd_of_ne_two hpri.out hodd
  obtain (hab|hc) := (Nat.prime_iff_prime_int.mp hpri.out).dvd_or_dvd caseII
  obtain (ha|hb) := (Nat.prime_iff_prime_int.mp hpri.out).dvd_or_dvd hab
  ¬∑ refine not_exists_Int_solution' hreg hodd ‚ü®b, -c, -a, ?_, ?_, ?_, ?_‚ü©
    ¬∑ simp only [‚Üê hgcd, Finset.mem_singleton, Finset.mem_insert, neg_inj, Finset.gcd_insert, id_eq,
        ‚Üê Int.coe_gcd, Int.neg_gcd, Nat.cast_inj, ‚Üê insert_emptyc_eq, Finset.gcd_empty,
        Int.gcd_left_comm _ a]
    ¬∑ rwa [dvd_neg]
    ¬∑ rwa [ne_eq, neg_eq_zero]
    ¬∑ simp [hodd'.neg_pow, ‚Üê e]
  ¬∑ refine not_exists_Int_solution' hreg hodd ‚ü®-c, a, -b, ?_, ?_, ?_, ?_‚ü©
    ¬∑ simp only [‚Üê hgcd, Finset.mem_singleton, Finset.mem_insert, neg_inj, Finset.gcd_insert, id_eq,
        ‚Üê Int.coe_gcd, Int.neg_gcd, Nat.cast_inj, ‚Üê insert_emptyc_eq, Finset.gcd_empty,
        Int.gcd_left_comm _ c]
    ¬∑ rwa [dvd_neg]
    ¬∑ rwa [ne_eq, neg_eq_zero]
    ¬∑ simp [hodd'.neg_pow, ‚Üê e]
  ¬∑ exact not_exists_Int_solution' hreg hodd ‚ü®a, b, c, hgcd, hc, c0, e‚ü©

end FltRegular
