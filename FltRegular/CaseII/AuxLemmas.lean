import Mathlib.RingTheory.ClassGroup
import Mathlib.NumberTheory.NumberField.Basic

variable {K : Type*} {p : ‚Ñï+} [Field K] [CharZero K]

variable {Œ∂ : K} (hŒ∂ : IsPrimitiveRoot Œ∂ p)

open scoped BigOperators nonZeroDivisors NumberField
open Polynomial

instance foofoo [NumberField K] : IsDomain (Ideal (ùìû K)) := by convert Ideal.isDomain (A := ùìû K)

instance [NumberField K] : CancelMonoidWithZero (Ideal (ùìû K)) :=
  @IsDomain.toCancelMonoidWithZero _ _ foofoo

lemma WfDvdMonoid.multiplicity_finite {M : Type*} [CancelCommMonoidWithZero M] [WfDvdMonoid M]
    {x y : M} (hx : ¬¨ IsUnit x) (hy : y ‚â† 0) :
    multiplicity.Finite x y := by
  by_contra h
  rw [multiplicity.Finite, not_exists_not] at h
  choose f hf using h
  obtain ‚ü®_, ‚ü®n, rfl‚ü©, hn‚ü© :=
    (WfDvdMonoid.wellFounded_dvdNotUnit (Œ± := M)).has_min (Set.range f) (Set.range_nonempty f)
  apply hn _ ‚ü®n + 1, rfl‚ü©
  constructor
  ¬∑ intro e
    apply hy
    rw [hf (n + 1), e, mul_zero]
  ¬∑ refine ‚ü®x, hx, ?_‚ü©
    rw [mul_comm, ‚Üê (mul_right_injective‚ÇÄ (a := x ^ (n + 1)) _).eq_iff]
    ¬∑ simp only [‚Üê mul_assoc, ‚Üê pow_succ, ‚Üê hf]
    ¬∑ intro e
      apply hy
      rw [hf n, e, zero_mul]

lemma WfDvdMonoid.multiplicity_finite_iff {M : Type*} [CancelCommMonoidWithZero M] [WfDvdMonoid M]
    {x y : M} :
  multiplicity.Finite x y ‚Üî ¬¨IsUnit x ‚àß y ‚â† 0 := by
  constructor
  ¬∑ rw [‚Üê not_imp_not, Ne, ‚Üê not_or, not_not]
    rintro (hx|hy)
    ¬∑ exact fun ‚ü®n, hn‚ü© ‚Ü¶ hn (hx.pow _).dvd
    ¬∑ simp [hy]
  ¬∑ intro ‚ü®hx, hy‚ü©
    exact WfDvdMonoid.multiplicity_finite hx hy

lemma dvd_iff_multiplicity_le {M : Type*}
    [CancelCommMonoidWithZero M] [DecidableRel (fun a b : M ‚Ü¶ a ‚à£ b)] [UniqueFactorizationMonoid M]
    {a b : M} (ha : a ‚â† 0) : a ‚à£ b ‚Üî ‚àÄ p : M, Prime p ‚Üí multiplicity p a ‚â§ multiplicity p b := by
  constructor
  ¬∑ intro hab p _
    exact multiplicity.multiplicity_le_multiplicity_of_dvd_right hab
  ¬∑ intro H
    by_cases hb : b = 0
    ¬∑ exact hb ‚ñ∏ dvd_zero a
    induction' a using WfDvdMonoid.induction_on_irreducible with u hu a q _ hq IH
    ¬∑ exact (ha rfl).elim
    ¬∑ exact hu.dvd
    ¬∑ simp only [ne_eq, mul_eq_zero, not_or] at ha
      rw [UniqueFactorizationMonoid.irreducible_iff_prime] at hq
      obtain ‚ü®c, rfl‚ü© : a ‚à£ b := by
        refine IH ha.2 (fun p hp ‚Ü¶ (le_trans ?_ (H p hp)))
        rw [multiplicity.mul hp]
        exact le_add_self
      rw [mul_comm]
      simp only [ne_eq, mul_eq_zero, not_or] at hb
      have := H q hq
      rw [multiplicity.mul hq, multiplicity.mul hq, add_comm,
        ‚Üê PartENat.natCast_get (multiplicity.finite_iff_dom.mp
          (WfDvdMonoid.multiplicity_finite hq.not_unit ha.2)),
        ‚Üê PartENat.natCast_get (multiplicity.finite_iff_dom.mp
          (WfDvdMonoid.multiplicity_finite hq.not_unit hb.2)),
        ‚Üê PartENat.natCast_get (multiplicity.finite_iff_dom.mp
          (WfDvdMonoid.multiplicity_finite hq.not_unit ha.1)),
        ‚Üê Nat.cast_add, ‚Üê Nat.cast_add, PartENat.coe_le_coe,
        multiplicity.get_multiplicity_self, add_le_add_iff_left,
        ‚Üê PartENat.coe_le_coe, PartENat.natCast_get, ‚Üê multiplicity.pow_dvd_iff_le_multiplicity,
        pow_one] at this
      exact mul_dvd_mul_left _ this

lemma ENat.mul_mono_left {k n m : ‚Ñï‚àû} (hk : k ‚â† 0) (hk' : k ‚â† ‚ä§) : k * n ‚â§ k * m ‚Üî n ‚â§ m := by
  obtain (n|n) := n
  ¬∑ rw [WithTop.none_eq_top, top_le_iff, WithTop.mul_top hk, top_le_iff, WithTop.mul_eq_top_iff,
      iff_true_intro hk, iff_false_intro hk']
    simp
  obtain (m|m) := m
  ¬∑ simp only [WithTop.none_eq_top, le_top, iff_true]
    rw [WithTop.mul_top hk]
    simp
  obtain (k|k) := k
  ¬∑ simp at hk'; contradiction
  simp_rw [WithTop.some_eq_coe, ENat.some_eq_coe]
  rw [‚Üê ENat.coe_mul, ‚Üê ENat.coe_mul, Nat.cast_le, Nat.cast_le]
  refine (strictMono_mul_left_of_pos (Nat.pos_of_ne_zero ?_)).le_iff_le
  rintro rfl
  exact hk rfl

lemma ENat.nsmul_mono {n m : ‚Ñï‚àû} {k : ‚Ñï} (hk : k ‚â† 0) : k ‚Ä¢ n ‚â§ k ‚Ä¢ m ‚Üî n ‚â§ m := by
  simp_rw [nsmul_eq_mul]
  apply ENat.mul_mono_left
  ¬∑ exact Nat.cast_ne_zero.mpr hk
  ¬∑ exact coe_ne_top k

lemma pow_dvd_pow_iff_dvd {M : Type*} [CancelCommMonoidWithZero M] [UniqueFactorizationMonoid M]
    {a b : M} {x : ‚Ñï} (h' : x ‚â† 0) : a ^ x ‚à£ b ^ x ‚Üî a ‚à£ b := by
  classical
  by_cases ha : a = 0
  ¬∑ rw [ha, zero_pow h', zero_dvd_iff, zero_dvd_iff, pow_eq_zero_iff h']
  have ha' : a ^ x ‚â† 0 := (pow_ne_zero_iff h').mpr ha
  rw [dvd_iff_multiplicity_le ha, dvd_iff_multiplicity_le ha']
  refine forall‚ÇÇ_congr (fun p hp ‚Ü¶ ?_)
  simp_rw [multiplicity.pow hp, ‚Üê PartENat.withTopEquiv_le]
  show PartENat.withTopAddEquiv _ ‚â§ PartENat.withTopAddEquiv _ ‚Üî _
  simp_rw [map_nsmul]
  rw [ENat.nsmul_mono h']
  rfl

theorem isPrincipal_of_isPrincipal_pow_of_Coprime'
    {A K: Type*} [CommRing A] [IsDedekindDomain A] [Fintype (ClassGroup A)]
    [Field K] [Algebra A K] [IsFractionRing A K] (p : ‚Ñï)
    (H : p.Coprime <| Fintype.card <| ClassGroup A) (I : FractionalIdeal A‚Å∞ K)
    (hI : (‚Üë(I ^ p) : Submodule A K).IsPrincipal) : (I : Submodule A K).IsPrincipal := by
  by_cases Izero : I = 0
  ¬∑ rw [Izero, FractionalIdeal.coe_zero]
    exact bot_isPrincipal
  rw [‚Üê Ne, ‚Üê isUnit_iff_ne_zero] at Izero
  show Submodule.IsPrincipal (Izero.unit' : FractionalIdeal A‚Å∞ K)
  rw [‚Üê ClassGroup.mk_eq_one_iff, ‚Üê orderOf_eq_one_iff, ‚Üê Nat.dvd_one, ‚Üê H, Nat.dvd_gcd_iff]
  refine ‚ü®?_, orderOf_dvd_card‚ü©
  rw [orderOf_dvd_iff_pow_eq_one, ‚Üê map_pow, ClassGroup.mk_eq_one_iff]
  simp only [Units.val_pow_eq_pow_val, IsUnit.val_unit', hI]

variable (hp : p ‚â† 2)

open FractionalIdeal in
lemma exists_not_dvd_spanSingleton_eq {R : Type*} [CommRing R] [IsDomain R] [IsDedekindDomain R]
    {K : Type*} [Field K] [Algebra R K] [IsFractionRing R K]
    {x : R} (hx : Prime x) (I J : Ideal R)
    (hI : ¬¨ (Ideal.span <| singleton x) ‚à£ I) (hJ : ¬¨ (Ideal.span <| singleton x) ‚à£ J)
    (h : Submodule.IsPrincipal ((I / J : FractionalIdeal R‚Å∞ K) : Submodule R K)) :
    ‚àÉ a b : R, ¬¨(x ‚à£ a) ‚àß ¬¨(x ‚à£ b) ‚àß spanSingleton R‚Å∞ (algebraMap R K a / algebraMap R K b) = I / J := by
  by_contra H1
  have hI' : (I : FractionalIdeal R‚Å∞ K) ‚â† 0 :=
    by rw [‚Üê coeIdeal_bot, Ne, coeIdeal_inj]; rintro rfl; exact hI (dvd_zero _)
  have hJ' : (J : FractionalIdeal R‚Å∞ K) ‚â† 0 :=
    by rw [‚Üê coeIdeal_bot, Ne, coeIdeal_inj]; rintro rfl; exact hJ (dvd_zero _)
  have : ‚àÄ n : ‚Ñï, (1 ‚â§ n) ‚Üí ¬¨‚àÉ a b : R, ¬¨(x ^ n ‚à£ a) ‚àß ¬¨(x ^ n ‚à£ b) ‚àß
    spanSingleton R‚Å∞ (algebraMap R K a / algebraMap R K b) = I / J := by
    intro n hn
    induction' n, hn using Nat.le_induction with n' hn' IH
    ¬∑ simp_rw [pow_one]
      exact H1
    ¬∑ rintro ‚ü®a, b, ha, hb, e‚ü©
      have e‚ÇÄ := e
      rw [div_eq_mul_inv, ‚Üê spanSingleton_mul_spanSingleton,
        ‚Üê one_div_spanSingleton, ‚Üê mul_div_assoc, mul_one, div_eq_iff,
        ‚Üê mul_div_right_comm, eq_div_iff hJ', ‚Üê coeIdeal_span_singleton, ‚Üê coeIdeal_span_singleton,
        ‚Üê coeIdeal_mul, ‚Üê coeIdeal_mul, coeIdeal_inj] at e
      on_goal 2 =>
        rw [Ne, spanSingleton_eq_zero_iff, ‚Üê (algebraMap R K).map_zero,
          (IsFractionRing.injective R K).eq_iff]
        rintro rfl
        apply hb (dvd_zero _)
      by_cases h : x ^ n' ‚à£ a
      ¬∑ have ha' : x ‚à£ a := (dvd_pow_self _ (Nat.one_le_iff_ne_zero.mp hn')).trans h
        have hb' : x ‚à£ b := by
          have : gcd (Ideal.span <| singleton x) I = 1 := by
            rwa [Irreducible.gcd_eq_one_iff]
            ¬∑ rwa [irreducible_iff_prime, Ideal.prime_iff_isPrime, Ideal.span_singleton_prime]
              ¬∑ exact hx.ne_zero
              ¬∑ rw [Ne, Ideal.span_singleton_eq_bot]
                exact hx.ne_zero
          rw [‚Üê Ideal.mem_span_singleton, ‚Üê Ideal.dvd_span_singleton] at ha' ‚ä¢
          replace h := ha'.trans (dvd_mul_right _ J)
          rwa [e, ‚Üê dvd_gcd_mul_iff_dvd_mul, this, one_mul] at h
        obtain ‚ü®a', rfl‚ü© := ha'
        obtain ‚ü®b', rfl‚ü© := hb'
        rw [pow_succ', mul_dvd_mul_iff_left hx.ne_zero] at ha hb
        rw [_root_.map_mul, _root_.map_mul, mul_div_mul_left] at e‚ÇÄ
        ¬∑ exact IH ‚ü®a', b', ha, hb, e‚ÇÄ‚ü©
        ¬∑ rw [Ne, ‚Üê (algebraMap R K).map_zero, (IsFractionRing.injective R K).eq_iff]
          exact hx.ne_zero
      ¬∑ refine IH ‚ü®a, b, h, ?_, e‚ÇÄ‚ü©
        intro hb
        apply h
        rw [‚Üê Ideal.mem_span_singleton, ‚Üê Ideal.dvd_span_singleton] at hb ‚ä¢
        replace hb := hb.trans (dvd_mul_left _ I)
        have : gcd (Ideal.span <| singleton <| x ^ n') J = 1 := by
          rwa [‚Üê Ideal.isCoprime_iff_gcd, ‚Üê Ideal.span_singleton_pow,
            IsCoprime.pow_left_iff, Ideal.isCoprime_iff_gcd, Irreducible.gcd_eq_one_iff]
          ¬∑ rwa [irreducible_iff_prime, Ideal.prime_iff_isPrime, Ideal.span_singleton_prime]
            ¬∑ exact hx.ne_zero
            ¬∑ rw [Ne, Ideal.span_singleton_eq_bot]
              exact hx.ne_zero
          ¬∑ rwa [Nat.pos_iff_ne_zero, ‚Üê Nat.one_le_iff_ne_zero]
        rwa [‚Üê e, mul_comm, ‚Üê dvd_gcd_mul_iff_dvd_mul, this, one_mul] at hb
  rw [isPrincipal_iff] at h
  obtain ‚ü®a, ha‚ü© := h
  obtain ‚ü®s, t, rfl‚ü© := IsLocalization.mk'_surjective R‚Å∞ a
  by_cases h : s = 0
  ¬∑ rw [div_eq_iff hJ', h, IsLocalization.mk'_zero, spanSingleton_zero, zero_mul] at ha
    exact hI' ha
  obtain ‚ü®n, hn‚ü© := WfDvdMonoid.multiplicity_finite hx.not_unit h
  obtain ‚ü®m, hm‚ü© := WfDvdMonoid.multiplicity_finite hx.not_unit (nonZeroDivisors.ne_zero t.prop)
  rw [IsFractionRing.mk'_eq_div] at ha
  refine this (n + m + 1) (Nat.le_add_left 1 (n + m)) ‚ü®s, t, ?_, ?_, ha.symm‚ü©
  ¬∑ intro hs
    refine hn (dvd_trans (pow_dvd_pow _ ?_) hs)
    linarith
  ¬∑ intro ht
    refine hm (dvd_trans (pow_dvd_pow _ (Nat.le_add_left _ _)) ht)
